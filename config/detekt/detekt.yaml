Compose:
  ComposableAnnotationNaming:
    active: true
  ComposableNaming:
    active: true
    # -- You can optionally disable the checks in this rule for regex matches against the composable name (e.g. molecule presenters)
    # allowedComposableFunctionNames: .*Presenter,.*MoleculePresenter
  ComposableParamOrder:
    active: true
    # -- You can optionally have a list of types to be treated as lambdas (e.g. typedefs or fun interfaces not picked up automatically)
    # treatAsLambda: MyLambdaType
  CompositionLocalAllowlist:
    active: true
    # -- You can optionally define a list of CompositionLocals that are allowed here
    allowedCompositionLocals: LocalTextColor,LocalContentAlpha, LocalTextStyle,LocalContentColor,LocalOnContentColor,LocalKrailTypography,LocalKrailColors
  CompositionLocalNaming:
    active: true
  ContentEmitterReturningValues:
    active: true
    # -- You can optionally add your own composables here
    # contentEmitters: MyComposable,MyOtherComposable
  ContentTrailingLambda:
    active: true
    # -- You can optionally have a list of types to be treated as composable lambdas (e.g. typedefs or fun interfaces not picked up automatically)
    # treatAsComposableLambda: MyComposableLambdaType
  DefaultsVisibility:
    active: true
  LambdaParameterInRestartableEffect:
    active: false
    # -- You can optionally have a list of types to be treated as lambdas (e.g. typedefs or fun interfaces not picked up automatically)
    # treatAsLambda: MyLambdaType
  Material2:
    active: true # Opt-in, disabled by default. Turn on if you want to disallow Material 2 usages.
    # -- You can optionally allow parts of it, if you are in the middle of a migration.
    # allowedFromM2: icons.Icons,TopAppBar
  ModifierClickableOrder:
    active: true
    # -- You can optionally add your own Modifier types
    # customModifiers: BananaModifier,PotatoModifier
  ModifierComposable:
    active: true
    # -- You can optionally add your own Modifier types
    # customModifiers: BananaModifier,PotatoModifier
  ModifierComposed:
    active: true
    # -- You can optionally add your own Modifier types
    # customModifiers: BananaModifier,PotatoModifier
  ModifierMissing:
    active: true
    # -- You can optionally control the visibility of which composables to check for here
    # -- Possible values are: `only_public`, `public_and_internal` and `all` (default is `only_public`)
    # checkModifiersForVisibility: only_public
    # -- You can optionally add your own Modifier types
    # customModifiers: BananaModifier,PotatoModifier
  ModifierNaming:
    active: true
    # -- You can optionally add your own Modifier types
    # customModifiers: BananaModifier,PotatoModifier
  ModifierNotUsedAtRoot:
    active: true
    # -- You can optionally add your own composables here
    # contentEmitters: MyComposable,MyOtherComposable
    # -- You can optionally add your own Modifier types
    # customModifiers: BananaModifier,PotatoModifier
  ModifierReused:
    active: true
    # -- You can optionally add your own Modifier types
    # customModifiers: BananaModifier,PotatoModifier
  ModifierWithoutDefault:
    active: true
  MultipleEmitters:
    active: true
    # -- You can optionally add your own composables here that will count as content emitters
    # contentEmitters: MyComposable,MyOtherComposable
    # -- You can add composables here that you don't want to count as content emitters (e.g. custom dialogs or modals)
    # contentEmittersDenylist: MyNonEmitterComposable
  MutableParams:
    active: true
  MutableStateAutoboxing:
    active: true
  MutableStateParam:
    active: true
  ParameterNaming:
    active: true
    # -- You can optionally have a list of types to be treated as composable lambdas (e.g. typedefs or fun interfaces not picked up automatically)
    # treatAsComposableLambda: MyComposableLambdaType
  PreviewAnnotationNaming:
    active: true
  PreviewPublic:
    active: true
  RememberMissing:
    active: true
  RememberContentMissing:
    active: true
  UnstableCollections:
    active: false # Opt-in, disabled by default. Turn on if you want to enforce this (e.g. you have strong skipping disabled)
  ViewModelForwarding:
    active: true
    # -- You can optionally use this rule on things other than types ending in "ViewModel" or "Presenter" (which are the defaults). You can add your own via a regex here:
    # allowedStateHolderNames: .*ViewModel,.*Presenter
    # -- You can optionally add an allowlist for Composable names that won't be affected by this rule
    # allowedForwarding: .*Content,.*FancyStuff
    # -- You can optionally add an allowlist for ViewModel/StateHolder names that won't be affected by this rule
    # allowedForwardingOfTypes: PotatoViewModel,(Apple|Banana)ViewModel,.*FancyViewModel
  ViewModelInjection:
    active: true
    # -- You can optionally add your own ViewModel factories here
    # viewModelFactories: hiltViewModel,potatoViewModel

comments:
  CommentOverPrivateProperty:
    active: true
  UndocumentedPublicClass:
    active: true
    excludes: ['**/*.kt']
    includes: ['**/detekt-api/src/main/**/api/*.kt']
  UndocumentedPublicFunction:
    active: true
    excludes: ['**/*.kt']
    includes: ['**/detekt-api/src/main/**/api/*.kt']

complexity:
  StringLiteralDuplication:
    active: true
    excludes: ['**/test/**', '**/*Test.kt', '**/*Spec.kt']
    threshold: 5
    ignoreAnnotation: true
    excludeStringsWithLessThan5Characters: true
    ignoreStringsRegex: '$^'
    ignoreAnnotated: ['Preview', 'PreviewLightDark', 'PreviewComponent']
  ComplexInterface:
    active: false
    threshold: 10
    includeStaticDeclarations: false
    includePrivateDeclarations: false
  CyclomaticComplexMethod:
    active: true
    ignoreSingleWhenExpression: true
  LargeClass:
    active: true
    excludes: ['**/test/**', '**/*.Test.kt', '**/*.Spec.kt']
  MethodOverloading:
    active: true
  TooManyFunctions:
    active: false
    ignoreAnnotatedFunctions: ['Composable']
    excludes: ['**/test/**', '**/functionalTest/**']
  LongMethod:
    active: true
    threshold: 60
    ignoreAnnotated: ['Composable']
  LongParameterList:
    active: false
    ignoreAnnotated: ['Composable', 'Test', 'GET', 'POST']

coroutines:
  active: true
  GlobalCoroutineUsage:
    active: true
  RedundantSuspendModifier:
    active: true
  SleepInsteadOfDelay:
    active: true
  SuspendFunWithFlowReturnType:
    active: true

exceptions:
  InstanceOfCheckForException:
    active: true
  NotImplementedDeclaration:
    active: true
  ObjectExtendsThrowable:
    active: true
  RethrowCaughtException:
    active: true
  ReturnFromFinally:
    active: true
  ThrowingExceptionFromFinally:
    active: true
  ThrowingExceptionInMain:
    active: true
  ThrowingExceptionsWithoutMessageOrCause:
    active: true
  ThrowingNewInstanceOfSameException:
    active: true

formatting:
  active: true
  android: false
  autoCorrect: true
  ContextReceiverMapping:
    active: true
  Filename:
    active: false
  MaximumLineLength:
    active: false
  ParameterListSpacing:
    active: true
  TypeParameterListSpacing:
    active: true
  Indentation:
    active: true
    indentSize: 4
  TrailingCommaOnCallSite:
    active: true
  TrailingCommaOnDeclarationSite:
    active: true

naming:
  ClassNaming:
    ignoreAnnotated: ['org.junit.jupiter.api.Nested']
  FunctionNaming:
    active: true
    excludes: []
    ignoreAnnotated: ['Test', 'ParameterizedTest', 'RepeatedTest', 'TestFactory', 'Composable']
  TopLevelPropertyNaming:
    constantPattern: '[a-z][_A-Za-z0-9]*|[A-Z][_A-Z0-9]*'
  InvalidPackageDeclaration:
    active: true
    excludes: ['**/build-logic/**/*.kt', '**/*.kts']
  NoNameShadowing:
    active: true
  NonBooleanPropertyPrefixedWithIs:
    active: true
  VariableMaxLength:
    active: true
  VariableMinLength:
    active: true

performance:
  SpreadOperator:
    excludes: ['**/test/**', '**/functionalTest/**']

potential-bugs:
  AvoidReferentialEquality:
    active: true
  DontDowncastCollectionTypes:
    active: true
  ElseCaseInsteadOfExhaustiveWhen:
    active: true
  ExitOutsideMain:
    active: false
  HasPlatformType:
    active: true
  IgnoredReturnValue:
    active: true
  ImplicitUnitReturnType:
    active: true
  MapGetWithNotNullAssertionOperator:
    active: true
  UnconditionalJumpStatementInLoop:
    active: true
  UnreachableCatchBlock:
    active: true
  UnsafeCast:
    active: true
    excludes: ['**/test/**', '**/*.Test.kt', '**/*.Spec.kt']
  UselessPostfixExpression:
    active: true

style:
  BracesOnIfStatements:
    active: true
    singleLine: 'consistent'
    multiLine: 'consistent'
  CanBeNonNullable:
    active: true
  CascadingCallWrapping:
    active: false
  ClassOrdering:
    active: true
  CollapsibleIfStatements:
    active: true
  DestructuringDeclarationWithTooManyEntries:
    active: true
  EqualsOnSignatureLine:
    active: true
  ExplicitCollectionElementAccessMethod:
    active: true
  ExplicitItLambdaParameter:
    active: true
  ForbiddenComment:
    active: true
    comments:
      - value: 'FIXME:'
        reason: 'Forbidden FIXME todo marker in comment, please fix the problem.'
      - value: 'STOPSHIP:'
        reason: 'Forbidden STOPSHIP todo marker in comment, please address the problem before shipping the code.'
      - value: 'TODO:'
        reason: 'Forbidden TODO todo marker in comment, please do the changes.'
      - value: '@author'
        reason: 'Authors are not recorded in KDoc.'
      - value: '@requiresTypeResolution'
        reason: 'Use @RequiresTypeResolution annotation on the class instead.'
    excludes: ['**/detekt-rules-style/**/ForbiddenComment.kt']
  ForbiddenImport:
    active: true
    imports:
      - value: 'org.assertj.core.api.Assertions'
        reason: 'Import Assertions.assertThat instead.'
      - value: 'org.junit.jupiter.api.Assertions*'
        reason: 'Use AssertJ assertions instead.'
      - value: 'org.junit.jupiter.api.assertAll'
        reason: 'Use AssertJ assertSoftly instead.'
      - value: 'org.junit.jupiter.api.assertThrows'
        reason: 'Use AssertJ assertThatCode { }.isInstanceOf() or assertThatExceptionOfType().isThrownBy { } instead.'
      - value: 'org.junit.jupiter.api.assertDoesNotThrow'
        reason: 'Use AssertJ assertThatCode { }.doesNotThrowAnyException() instead.'
      # These don't have AssertJ alternatives, so just allow them:
      #- value: 'org.junit.jupiter.api.fail'
      #- value: 'org.junit.jupiter.api.assertTimeout'
      #- value: 'org.junit.jupiter.api.assertTimeoutPreemptively'
      - value: 'java.util.stream.*'
        reason: "Use Kotlin's sequences instead."
  ForbiddenMethodCall:
    active: true
    methods:
      - 'kotlin.io.print'
      - 'kotlin.io.println'
      - 'java.net.URL.openStream'
      - 'java.lang.Class.getResourceAsStream'
      - 'java.lang.ClassLoader.getResourceAsStream'
      - 'org.jetbrains.kotlin.diagnostics.DiagnosticUtils.getLineAndColumnInPsiFile'
  ForbiddenVoid:
    active: true
  MagicNumber:
    active: false
    excludes: ['**/test/**', '**/*Test.kt', '**/*Spec.kt']
    ignorePropertyDeclaration: true
    ignoreAnnotation: true
    ignoreEnums: true
    ignoreNumbers:
      - '-1'
      - '0'
      - '1'
      - '2'
      - '100'
      - '1000'
  MandatoryBracesLoops:
    active: true
  MaxLineLength:
    active: true
    excludes: ['**/test/**', '**/*Test.kt', '**/*Spec.kt']
    excludeCommentStatements: true
    autoCorrect: true
  NestedClassesVisibility:
    active: true
  ObjectLiteralToLambda:
    active: true
  PreferToOverPairSyntax:
    active: true
  RedundantExplicitType:
    active: true
  RedundantHigherOrderMapUsage:
    active: true
  RedundantVisibilityModifierRule:
    active: true
  ReturnCount:
    active: true
    excludeGuardClauses: true
  SpacingBetweenPackageAndImports:
    active: true
  TrimMultilineRawString:
    active: true
  UnderscoresInNumericLiterals:
    active: true
  UnnecessaryAnnotationUseSiteTarget:
    active: true
  UnnecessaryBackticks:
    active: true
  UnnecessaryFilter:
    active: true
  UnnecessaryLet:
    active: true
  UnnecessaryInnerClass:
    active: true
    ignoreAnnotated: ['Nested']
  UntilInsteadOfRangeTo:
    active: true
  UnusedImports:
    active: false # formatting already have this rule enabled
  UnusedPrivateMember:
    active: false
    allowedNames: '(_|ignored|expected)'
  UseAnyOrNoneInsteadOfFind:
    active: true
  UseCheckOrError:
    active: true
  UseEmptyCounterpart:
    active: true
  UseIfEmptyOrIfBlank:
    active: true
  UseIsNullOrEmpty:
    active: true
  UseLet:
    active: true
  UseOrEmpty:
    active: true
  UseRequire:
    active: true
  UseRequireNotNull:
    active: true
  VarCouldBeVal:
    active: true
    ignoreAnnotated: ['Parameter']
  WildcardImport:
    active: true
    excludeImports: []
