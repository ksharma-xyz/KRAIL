<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>ArgumentListWrapping:SavedTripsViewModel.kt$SavedTripsViewModel$( "Park Ride card collapsed for stopId: ${parkRideState.stopId} , facilities: ${parkRideState.facilities.joinToString()}")</ID>
    <ID>ArgumentListWrapping:SavedTripsViewModel.kt$SavedTripsViewModel$( "Park Ride card expanded for stopId: ${parkRideState.stopId} , facilities: ${parkRideState.facilities.joinToString()}")</ID>
    <ID>ArgumentListWrapping:SavedTripsViewModel.kt$SavedTripsViewModel$("Park Ride card collapsed for stopId: ${parkRideState.stopId} , facilities: ${parkRideState.facilities.joinToString()}")</ID>
    <ID>ArgumentListWrapping:SavedTripsViewModel.kt$SavedTripsViewModel$("Park Ride card expanded for stopId: ${parkRideState.stopId} , facilities: ${parkRideState.facilities.joinToString()}")</ID>
    <ID>ArgumentListWrapping:ThemeSelectionRadioButton.kt$( controlX1, centerY, controlX2, endY, nextX, endY )</ID>
    <ID>CascadingCallWrapping:DateTimeSelectorViewModel.kt$DateTimeSelectorViewModel$stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), Unit)</ID>
    <ID>CascadingCallWrapping:IntroViewModel.kt$IntroViewModel$stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), IntroState.default())</ID>
    <ID>CascadingCallWrapping:RealStopResultsManager.kt$RealStopResultsManager$second</ID>
    <ID>CascadingCallWrapping:SavedTripCard.kt$primaryTransportMode?.colorCode ?.hexToComposeColor() ?: themeColor()</ID>
    <ID>CascadingCallWrapping:SavedTripsViewModel.kt$SavedTripsViewModel$stopName</ID>
    <ID>CascadingCallWrapping:SearchStopScreen.kt$collectLatest {}</ID>
    <ID>CascadingCallWrapping:SearchStopViewModel.kt$SearchStopViewModel$stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), SearchStopState())</ID>
    <ID>CascadingCallWrapping:ServiceAlertsViewModel.kt$ServiceAlertsViewModel$stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), ServiceAlertState())</ID>
    <ID>CascadingCallWrapping:SettingsViewModel.kt$SettingsViewModel$stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), SettingsState())</ID>
    <ID>CascadingCallWrapping:TimeTableViewModel.kt$TimeTableViewModel$dayOfWeek</ID>
    <ID>CascadingCallWrapping:TimeTableViewModel.kt$TimeTableViewModel$stateIn(viewModelScope, SharingStarted.WhileSubscribed(ANR_TIMEOUT), true)</ID>
    <ID>CascadingCallWrapping:TimeTableViewModel.kt$TimeTableViewModel$toHHMM()</ID>
    <ID>ClassOrdering:ReferFriendManager.kt$ReferFriendManager$fun getReferText(): String</ID>
    <ID>CommentOverPrivateProperty:SavedTripsViewModel.kt$SavedTripsViewModel$/** * Will observe park ride facilities from the database. */ private var observeParkRideFacilityFromDatabaseJob: Job? = null</ID>
    <ID>CommentOverPrivateProperty:SavedTripsViewModel.kt$SavedTripsViewModel$/** * Will observe saved trips from the database. */ private var observeSavedTripsJob: Job? = null</ID>
    <ID>CommentOverPrivateProperty:TimeTableViewModel.kt$TimeTableViewModel.Companion$/** * Maximum number of started journeys to display. */ // TODO - UT - at-least these many should remain in past all the time once initial // past trips are starting to show. private const val MAX_STARTED_JOURNEY_DISPLAY_THRESHOLD = 2</ID>
    <ID>ComplexInterface:StopResultsManager.kt$StopResultsManager</ID>
    <ID>ComposableParamOrder:DiscoverScreen.kt$DiscoverScreen</ID>
    <ID>ComposableParamOrder:DiscoverScreen.kt$DiscoverScreenCompact</ID>
    <ID>ComposableParamOrder:DiscoverScreen.kt$DiscoverScreenTablet</ID>
    <ID>ComposableParamOrder:HtmlText.kt$HtmlText</ID>
    <ID>ComposableParamOrder:JourneyTimeOptionsGroup.kt$JourneyTimeOptionsGroup</ID>
    <ID>ComposableParamOrder:TagLineWithEmoji.kt$TagLineWithEmoji</ID>
    <ID>ComposableParamOrder:TimeTableScreen.kt$JourneyCardItem</ID>
    <ID>CyclomaticComplexMethod:JourneyCard.kt$@Composable private fun ResponsiveJourneyInfoRow( destinationTime: String, totalTravelTime: String, totalWalkTime: String?, departureDeviation: TimeTableState.JourneyCardInfo.DepartureDeviation?, )</ID>
    <ID>CyclomaticComplexMethod:SearchStopScreen.kt$@OptIn(FlowPreview::class, ExperimentalCoroutinesApi::class, ExperimentalTime::class) @Composable fun SearchStopScreen( searchStopState: SearchStopState, modifier: Modifier = Modifier, searchQuery: String = "", goBack: () -&gt; Unit = {}, onStopSelect: (StopItem) -&gt; Unit = {}, onEvent: (SearchStopUiEvent) -&gt; Unit = {}, )</ID>
    <ID>CyclomaticComplexMethod:ThemeSelectionRadioButton.kt$@Composable fun ThemeSelectionRadioButton( themeStyle: KrailThemeStyle, onClick: (KrailThemeStyle) -&gt; Unit, modifier: Modifier = Modifier, selected: Boolean = false, )</ID>
    <ID>CyclomaticComplexMethod:TripResponseMapper.kt$@Suppress("ComplexCondition") private fun TripResponse.Leg.toUiModel(): TimeTableState.JourneyCardInfo.Leg?</ID>
    <ID>FinalNewline:DiscoverScreen.kt$xyz.ksharma.krail.trip.planner.ui.discover.DiscoverScreen.kt</ID>
    <ID>FinalNewline:IntroContentPlanTrip.kt$xyz.ksharma.krail.trip.planner.ui.intro.IntroContentPlanTrip.kt</ID>
    <ID>FinalNewline:ParkRideCard.kt$xyz.ksharma.krail.trip.planner.ui.components.ParkRideCard.kt</ID>
    <ID>FunctionNaming:AnimatedDots.kt$@Composable fun AnimatedDots(modifier: Modifier = Modifier, color: Color = KrailTheme.colors.onSurface)</ID>
    <ID>FunctionNaming:AppLogo.kt$@Composable fun AppLogo(modifier: Modifier = Modifier)</ID>
    <ID>FunctionNaming:CollapsibleAlert.kt$@Composable fun CollapsibleAlert( serviceAlert: ServiceAlert, index: Int, onClick: () -&gt; Unit, modifier: Modifier = Modifier, collapsed: Boolean = true, )</ID>
    <ID>FunctionNaming:CollapsibleAlert.kt$@Preview @Composable private fun PreviewCollapsibleAlertCollapsed()</ID>
    <ID>FunctionNaming:CollapsibleAlert.kt$@Preview @Composable private fun PreviewCollapsibleAlertExpanded()</ID>
    <ID>FunctionNaming:DateSelection.kt$@Composable fun DateSelection( themeColor: Color, date: String, modifier: Modifier = Modifier, onNextClicked: () -&gt; Unit = {}, onPreviousClicked: () -&gt; Unit = {}, )</ID>
    <ID>FunctionNaming:DateTimeSelectorScreen.kt$@OptIn(ExperimentalMaterial3Api::class, ExperimentalTime::class) @Composable fun DateTimeSelectorScreen( dateTimeSelection: DateTimeSelectionItem?, modifier: Modifier = Modifier, onBackClick: () -&gt; Unit = {}, onDateTimeSelected: (DateTimeSelectionItem?) -&gt; Unit = {}, onResetClick: () -&gt; Unit = {}, )</ID>
    <ID>FunctionNaming:DiscoverChip.kt$@Composable fun DiscoverChip( type: DiscoverCardType, selected: Boolean, modifier: Modifier = Modifier, horizontalPadding: Dp = DiscoverChipDefaults.ChipHorizontalPadding, verticalPadding: Dp = DiscoverChipDefaults.ChipVerticalPadding, )</ID>
    <ID>FunctionNaming:DiscoverChip.kt$@Preview(group = "Discover Chip Previews - Barbie Pink", name = "Selected Dark Mode") @Preview @Composable private fun DiscoverChipPreview_BarbiePink_Selected_DarkMode()</ID>
    <ID>FunctionNaming:DiscoverChip.kt$@Preview(group = "Discover Chip Previews - Barbie Pink", name = "Selected Light Mode") @Composable private fun DiscoverChipPreview_BarbiePink_Selected()</ID>
    <ID>FunctionNaming:DiscoverChip.kt$@Preview(group = "Discover Chip Previews - Barbie Pink", name = "Unselected Dark Mode") @Preview @Composable private fun DiscoverChipPreview_BarbiePink_Unselected_DarkMode()</ID>
    <ID>FunctionNaming:DiscoverChip.kt$@Preview(group = "Discover Chip Previews - Barbie Pink", name = "Unselected Light Mode") @Preview @Composable private fun DiscoverChipPreview_BarbiePink_Unselected()</ID>
    <ID>FunctionNaming:DiscoverChipRow.kt$@Composable fun DiscoverChipRow( chipTypes: ImmutableList&lt;DiscoverCardType&gt;, selectedType: DiscoverCardType, onChipSelected: (DiscoverCardType) -&gt; Unit, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:DiscoverChipRow.kt$@Preview @Composable private fun DiscoverChipRowPreview()</ID>
    <ID>FunctionNaming:DiscoverScreen.kt$@Composable fun DiscoverScreen( modifier: Modifier = Modifier, state: DiscoverState, onBackClick: () -&gt; Unit, onAppSocialLinkClicked: (KrailSocialType) -&gt; Unit, onPartnerSocialLinkClicked: (Button.Social.PartnerSocial.PartnerSocialLink, String, DiscoverCardType) -&gt; Unit, onCtaClicked: (url: String, cardId: String, cardType: DiscoverCardType) -&gt; Unit, onShareClick: (cardId: String, cardType: DiscoverCardType) -&gt; Unit, onCardSeen: (cardId: String) -&gt; Unit, resetAllSeenCards: () -&gt; Unit, onChipSelected: (DiscoverCardType) -&gt; Unit, )</ID>
    <ID>FunctionNaming:DiscoverScreen.kt$@Composable fun DiscoverScreenCompact( modifier: Modifier = Modifier, state: DiscoverState, onBackClick: () -&gt; Unit, onAppSocialLinkClicked: (KrailSocialType) -&gt; Unit, onPartnerSocialLinkClicked: (Button.Social.PartnerSocial.PartnerSocialLink, String, DiscoverCardType) -&gt; Unit, onCtaClicked: (url: String, cardId: String, cardType: DiscoverCardType) -&gt; Unit, onShareClick: (cardId: String, cardType: DiscoverCardType) -&gt; Unit, onCardSeen: (cardId: String) -&gt; Unit, resetAllSeenCards: () -&gt; Unit, onChipSelected: (DiscoverCardType) -&gt; Unit, )</ID>
    <ID>FunctionNaming:DiscoverScreen.kt$@Composable fun DiscoverScreenTablet( modifier: Modifier = Modifier, state: DiscoverState, onBackClick: () -&gt; Unit, onAppSocialLinkClicked: (KrailSocialType) -&gt; Unit, onPartnerSocialLinkClicked: (Button.Social.PartnerSocial.PartnerSocialLink, String, DiscoverCardType) -&gt; Unit, onCtaClicked: (url: String, cardId: String, cardType: DiscoverCardType) -&gt; Unit, onShareClick: (cardId: String, cardType: DiscoverCardType) -&gt; Unit, onCardSeen: (cardId: String) -&gt; Unit, resetAllSeenCards: () -&gt; Unit, onChipSelected: (DiscoverCardType) -&gt; Unit, )</ID>
    <ID>FunctionNaming:DiscoverScreen.kt$@Composable private fun BoxScope.DiscoverFooterChipsRow( state: DiscoverState, onChipSelected: (DiscoverCardType) -&gt; Unit, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:DiscoverScreen.kt$@Composable private fun BoxScope.DiscoverTitleBar( onBackClick: () -&gt; Unit, resetAllSeenCards: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:DiscoverScreen.kt$@Preview( group = "Discover Card Phone", showBackground = true, widthDp = 480, heightDp = 854, ) @Composable private fun DiscoverScreenCompactDarkPreview()</ID>
    <ID>FunctionNaming:DiscoverScreen.kt$@Preview( group = "Discover Card Phone", showBackground = true, widthDp = 480, heightDp = 854, ) @Composable private fun DiscoverScreenCompactLightPreview()</ID>
    <ID>FunctionNaming:DiscoverScreen.kt$@Preview( group = "Discover Card Tablet", showBackground = true, widthDp = 720, heightDp = 1024, ) @Composable private fun DiscoverScreenTabletDarkPreview()</ID>
    <ID>FunctionNaming:DiscoverScreen.kt$@Preview( group = "Discover Card Tablet", showBackground = true, widthDp = 720, heightDp = 1024, ) @Composable private fun DiscoverScreenTabletLightPreview()</ID>
    <ID>FunctionNaming:ErrorMessage.kt$@Composable fun ErrorMessage( title: String, message: String, modifier: Modifier = Modifier, emoji: String = "\uD83D\uDC36", actionData: ActionData? = null, )</ID>
    <ID>FunctionNaming:ErrorMessage.kt$@Composable private fun PreviewErrorMessage()</ID>
    <ID>FunctionNaming:HtmlText.kt$@Composable actual fun HtmlText( text: String, modifier: Modifier, onClick: () -&gt; Unit, color: Color, urlColor: Color, )</ID>
    <ID>FunctionNaming:HtmlText.kt$@Composable expect fun HtmlText( text: String, modifier: Modifier = Modifier, onClick: () -&gt; Unit, color: Color, urlColor: Color, )</ID>
    <ID>FunctionNaming:IconButton.kt$@Composable fun IconButton( painter: Painter, color: Color, modifier: Modifier = Modifier, onClick: () -&gt; Unit = {}, )</ID>
    <ID>FunctionNaming:IntroContentAlerts.kt$@Composable fun AnimatedAlertsOneByOne( displayAlert: Boolean, delayMillis: Long = 300L // delay before starting second animation )</ID>
    <ID>FunctionNaming:IntroContentAlerts.kt$@Composable fun IntroContentAlerts( tagline: String, style: String, // hexCode - // todo - see if it can be color instead. modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:IntroContentInviteFriends.kt$@Composable fun IntroContentInviteFriends( tagline: String, style: String, onShareClick: () -&gt; Unit, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:IntroContentPlanTrip.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun IntroContentPlanTrip( tagline: String, style: String, // hexCode modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:IntroContentRealTime.kt$@Composable fun IntroContentRealTime( tagline: String, style: String, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:IntroContentSaveTrips.kt$@Composable fun IntroContentSaveTrips( tagline: String, style: String, // hexCode - // todo - see if it can be color instead. modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:IntroContentSelectTransportMode.kt$@Composable fun IntroContentSelectTransportMode( tagline: String, style: String, // hexCode - // todo - see if it can be color instead. modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:IntroParkRide.kt$@Composable fun IntroParkRide(tagline: String, style: String, modifier: Modifier)</ID>
    <ID>FunctionNaming:IntroScreen.kt$@Composable fun IntroScreen( state: IntroState, modifier: Modifier = Modifier, onIntroComplete: (pageType: IntroPageType, pageNumber: Int) -&gt; Unit = { _, _ -&gt; }, onEvent: (IntroUiEvent) -&gt; Unit = {}, )</ID>
    <ID>FunctionNaming:IntroScreen.kt$@Composable private fun IntroPageContent( pageData: IntroState.IntroPage, modifier: Modifier = Modifier, onShareClick: () -&gt; Unit = {}, )</ID>
    <ID>FunctionNaming:IntroScreen.kt$@Composable private fun IntroTitle( offsetFraction: Float, state: IntroState, startPage: Int, animatedButtonColor: Color, animatedAlpha: Float, targetPage: Int )</ID>
    <ID>FunctionNaming:JourneyCard.kt$@Composable fun DefaultJourneyCardContent( originTime: String, destinationTime: String, totalTravelTime: String, totalWalkTime: String?, modifier: Modifier = Modifier, departureDeviation: TimeTableState.JourneyCardInfo.DepartureDeviation? = null, )</ID>
    <ID>FunctionNaming:JourneyCard.kt$@Composable fun ExpandedJourneyCardContent( totalTravelTime: String, legList: ImmutableList&lt;TimeTableState.JourneyCardInfo.Leg&gt;, totalUniqueServiceAlerts: Int, onAlertClick: () -&gt; Unit, onLegClick: (Boolean) -&gt; Unit, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:JourneyCard.kt$@Composable fun JourneyCard( timeToDeparture: String, platformNumber: String?, platformText: String?, originTime: String, destinationTime: String, totalTravelTime: String, legList: ImmutableList&lt;TimeTableState.JourneyCardInfo.Leg&gt;, transportModeLineList: ImmutableList&lt;TransportModeLine&gt;, onClick: () -&gt; Unit, cardState: JourneyCardState, totalWalkTime: String?, totalUniqueServiceAlerts: Int, modifier: Modifier = Modifier, onAlertClick: () -&gt; Unit = {}, onLegClick: (Boolean) -&gt; Unit = {}, departureDeviation: TimeTableState.JourneyCardInfo.DepartureDeviation? = null, )</ID>
    <ID>FunctionNaming:JourneyCard.kt$@Composable private fun DepartureDeviationIndicator( deviation: TimeTableState.JourneyCardInfo.DepartureDeviation, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:JourneyCard.kt$@Composable private fun JourneyCardHeader( transportModeLineList: ImmutableList&lt;TransportModeLine&gt;, platformText: String?, timeToDeparture: String, firstLegTransportModeColor: Color, modifier: Modifier = Modifier, onClick: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:JourneyCard.kt$@Composable private fun ResponsiveJourneyInfoRow( destinationTime: String, totalTravelTime: String, totalWalkTime: String?, departureDeviation: TimeTableState.JourneyCardInfo.DepartureDeviation?, )</ID>
    <ID>FunctionNaming:JourneyCard.kt$@Composable private fun TextWithIcon( painter: Painter, text: String, modifier: Modifier = Modifier, textStyle: TextStyle = KrailTheme.typography.bodyMedium, color: Color = KrailTheme.colors.onSurface, )</ID>
    <ID>FunctionNaming:JourneyCard.kt$@Composable private fun TransportModesRow( transportModeLineList: ImmutableList&lt;TransportModeLine&gt;, showBadge: (TransportModeLine) -&gt; Boolean, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:JourneyCard.kt$@Preview(name = "Default - Inline modes + platform (Dark)", group = "Collapsed") @Composable private fun Preview_Default_InlineModesAndPlatform_Dark()</ID>
    <ID>FunctionNaming:JourneyCard.kt$@Preview(name = "Default - Inline modes + platform", group = "Collapsed") @Composable private fun Preview_Default_InlineModesAndPlatform()</ID>
    <ID>FunctionNaming:JourneyCard.kt$@Preview(name = "Expanded - Journey card (Dark)", group = "Expanded") @Composable private fun Preview_JourneyCard_Expanded_Dark()</ID>
    <ID>FunctionNaming:JourneyCard.kt$@Preview(name = "Expanded - Journey card", group = "Expanded") @Composable private fun Preview_JourneyCard_Expanded()</ID>
    <ID>FunctionNaming:JourneyCard.kt$@Preview(name = "Large font - Modes on next line", group = "Collapsed") @Composable private fun Preview_LargeFont_ModesNextLine()</ID>
    <ID>FunctionNaming:JourneyCard.kt$@Preview(name = "Many modes - Wrapping", group = "Collapsed") @Composable private fun Preview_ManyModes_Wrap()</ID>
    <ID>FunctionNaming:JourneyTimeOptionsGroup.kt$@Composable fun JourneyTimeOptionsGroup( selectedOption: JourneyTimeOptions = JourneyTimeOptions.LEAVE, themeColor: Color, modifier: Modifier = Modifier, onOptionSelected: (JourneyTimeOptions) -&gt; Unit, )</ID>
    <ID>FunctionNaming:LegView.kt$@Composable fun LegView( routeText: String?, // AVC via XYZ transportModeLine: TransportModeLine, stops: ImmutableList&lt;TimeTableState.JourneyCardInfo.Stop&gt;, modifier: Modifier = Modifier, displayAllStops: Boolean = false, onClick: () -&gt; Unit = {}, )</ID>
    <ID>FunctionNaming:LegView.kt$@Composable private fun RouteSummary( routeText: String?, badgeText: String, badgeColor: Color, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:LegView.kt$@Composable private fun StopInfo( time: String, name: String, isProminent: Boolean, isWheelchairAccessible: Boolean, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:LegView.kt$@Composable private fun StopsRow( stops: String, line: TransportModeLine, modifier: Modifier = Modifier, onClick: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:LegView.kt$@Preview @Composable private fun PreviewLegView()</ID>
    <ID>FunctionNaming:LegView.kt$@Preview @Composable private fun PreviewLegViewFerry()</ID>
    <ID>FunctionNaming:LegView.kt$@Preview @Composable private fun PreviewLegViewLightRail()</ID>
    <ID>FunctionNaming:LegView.kt$@Preview @Composable private fun PreviewLegViewMetro()</ID>
    <ID>FunctionNaming:LegView.kt$@Preview @Composable private fun PreviewLegViewTwoStops()</ID>
    <ID>FunctionNaming:LegView.kt$@Preview @Composable private fun PreviewProminentStopInfo()</ID>
    <ID>FunctionNaming:LegView.kt$@Preview @Composable private fun PreviewRouteSummary()</ID>
    <ID>FunctionNaming:LegView.kt$@Preview @Composable private fun PreviewStopsRow()</ID>
    <ID>FunctionNaming:LegView.kt$@Preview @Composable private fun PreviewStopsRow_LargeFont()</ID>
    <ID>FunctionNaming:LoadingEmojiAnim.kt$@Composable fun LoadingEmojiAnim( emoji: String, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:LoadingEmojiAnim.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:OriginDestination.kt$@Composable internal fun OriginDestination( trip: Trip, timeLineColor: Color, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:OurStoryScreen.kt$@Composable fun OurStoryScreen( state: OurStoryState, modifier: Modifier = Modifier, onBackClick: () -&gt; Unit = {}, )</ID>
    <ID>FunctionNaming:OutlineRadioButton.kt$@Composable fun OutlineRadioButton( text: String, themeColor: Color, modifier: Modifier = Modifier, type: RadioButtonType = RadioButtonType.DEFAULT, selected: Boolean = false, enabled: Boolean = true, onClick: () -&gt; Unit = {}, )</ID>
    <ID>FunctionNaming:ParkRideCard.kt$@Composable fun ParkRideCard( parkRideUiState: ParkRideUiState, isExpanded: Boolean, modifier: Modifier = Modifier, onClick: () -&gt; Unit = {}, )</ID>
    <ID>FunctionNaming:ParkRideCard.kt$@Preview @Composable private fun ParkRideCardPreview()</ID>
    <ID>FunctionNaming:ParkRideContent.kt$@Composable fun ParkRideLoadedContent( parkRideFacilityDetail: ParkRideFacilityDetail, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:ParkRideContent.kt$@Preview @Composable fun ParkRideLoadedContentPreview_Barbie()</ID>
    <ID>FunctionNaming:ParkRideContent.kt$@Preview @Composable fun ParkRideLoadedContentPreview_Default()</ID>
    <ID>FunctionNaming:ParkRideContent.kt$@Preview @Composable fun ParkRideLoadedContentPreview_Full()</ID>
    <ID>FunctionNaming:ParkRideIcon.kt$@Composable internal fun ParkRideIcon( modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:ParkRideIcon.kt$@Composable internal fun ParkRideIconContainer( backgroundColor: Color, modifier: Modifier = Modifier, content: @Composable BoxScope.() -&gt; Unit, )</ID>
    <ID>FunctionNaming:ParkRideIcon.kt$@Preview @Composable private fun ParkRideIconBusThemePreview()</ID>
    <ID>FunctionNaming:ParkRideIcon.kt$@Preview @Composable private fun ParkRideIconMetroThemePreview()</ID>
    <ID>FunctionNaming:ParkRideIcon.kt$@Preview @Composable private fun ParkRideIconPinkThemePreview()</ID>
    <ID>FunctionNaming:ParkRideIcon.kt$@Preview @Composable private fun ParkRideIconPurpleThemePreview()</ID>
    <ID>FunctionNaming:ParkRideIcon.kt$@Preview @Composable private fun ParkRideIconTrainThemePreview()</ID>
    <ID>FunctionNaming:SavedTripCard.kt$@Composable fun SavedTripCard( trip: Trip, primaryTransportMode: TransportMode?, onStarClick: () -&gt; Unit, onCardClick: () -&gt; Unit, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:SavedTripCard.kt$@Preview @Composable private fun SavedTripCardListPreview()</ID>
    <ID>FunctionNaming:SavedTripCard.kt$@Preview @Composable private fun SavedTripCardPreview()</ID>
    <ID>FunctionNaming:SavedTripsScreen.kt$@Composable fun SavedTripsScreen( savedTripsState: SavedTripsState, modifier: Modifier = Modifier, fromButtonClick: () -&gt; Unit = {}, toButtonClick: () -&gt; Unit = {}, onReverseButtonClick: () -&gt; Unit = {}, onSavedTripCardClick: (StopItem?, StopItem?) -&gt; Unit = { _, _ -&gt; }, onSearchButtonClick: () -&gt; Unit = {}, onSettingsButtonClick: () -&gt; Unit = {}, onDiscoverButtonClick: () -&gt; Unit = {}, onEvent: (SavedTripUiEvent) -&gt; Unit = {}, )</ID>
    <ID>FunctionNaming:SavedTripsScreen.kt$@Composable private fun SavedTripsScreenPreview()</ID>
    <ID>FunctionNaming:SavedTripsScreen.kt$@Composable private fun SavedTripsTitle( modifier: Modifier = Modifier, content: @Composable () -&gt; Unit, )</ID>
    <ID>FunctionNaming:SearchStopRow.kt$@Composable fun SearchStopRow( fromButtonClick: () -&gt; Unit, toButtonClick: () -&gt; Unit, modifier: Modifier = Modifier, fromStopItem: StopItem? = null, toStopItem: StopItem? = null, onReverseButtonClick: () -&gt; Unit = {}, onSearchButtonClick: () -&gt; Unit = {}, )</ID>
    <ID>FunctionNaming:SearchStopRow.kt$@Composable private fun SearchStopColumnPreview()</ID>
    <ID>FunctionNaming:SearchStopScreen.kt$@Composable fun AnimatedPlaceholderTextField(modifier: Modifier)</ID>
    <ID>FunctionNaming:SearchStopScreen.kt$@Composable private fun PreviewSearchStopScreenBus()</ID>
    <ID>FunctionNaming:SearchStopScreen.kt$@Composable private fun PreviewSearchStopScreenCoach()</ID>
    <ID>FunctionNaming:SearchStopScreen.kt$@Composable private fun PreviewSearchStopScreenEmpty()</ID>
    <ID>FunctionNaming:SearchStopScreen.kt$@Composable private fun PreviewSearchStopScreenError()</ID>
    <ID>FunctionNaming:SearchStopScreen.kt$@Composable private fun PreviewSearchStopScreenFerry()</ID>
    <ID>FunctionNaming:SearchStopScreen.kt$@Composable private fun PreviewSearchStopScreenLightRail()</ID>
    <ID>FunctionNaming:SearchStopScreen.kt$@Composable private fun PreviewSearchStopScreenLoading()</ID>
    <ID>FunctionNaming:SearchStopScreen.kt$@Composable private fun PreviewSearchStopScreenMetro()</ID>
    <ID>FunctionNaming:SearchStopScreen.kt$@Composable private fun PreviewSearchStopScreenTrain()</ID>
    <ID>FunctionNaming:SearchStopScreen.kt$@OptIn(FlowPreview::class, ExperimentalCoroutinesApi::class, ExperimentalTime::class) @Composable fun SearchStopScreen( searchStopState: SearchStopState, modifier: Modifier = Modifier, searchQuery: String = "", goBack: () -&gt; Unit = {}, onStopSelect: (StopItem) -&gt; Unit = {}, onEvent: (SearchStopUiEvent) -&gt; Unit = {}, )</ID>
    <ID>FunctionNaming:ServiceAlertScreen.kt$@Composable fun ServiceAlertScreen( serviceAlerts: ImmutableSet&lt;ServiceAlert&gt;, modifier: Modifier = Modifier, onBackClick: () -&gt; Unit = {}, )</ID>
    <ID>FunctionNaming:ServiceAlertScreen.kt$@Composable private fun PreviewServiceAlertScreen()</ID>
    <ID>FunctionNaming:SettingsScreen.kt$@Composable fun SettingsScreen( appVersion: String, modifier: Modifier = Modifier, onBackClick: () -&gt; Unit = {}, onChangeThemeClick: () -&gt; Unit = {}, onReferFriendClick: () -&gt; Unit = {}, onAboutUsClick: () -&gt; Unit = {}, onIntroClick: () -&gt; Unit = {}, onSocialLinkClick: (KrailSocialType) -&gt; Unit = {}, )</ID>
    <ID>FunctionNaming:SettingsScreen.kt$@Composable private fun SettingsItem( icon: Painter, text: String, modifier: Modifier = Modifier, showDivider: Boolean = true, detailContent: (@Composable () -&gt; Unit)? = null, onClick: (() -&gt; Unit)? = null, )</ID>
    <ID>FunctionNaming:StopSearchListItem.kt$@Composable fun StopSearchListItem( stopName: String, stopId: String, transportModeSet: ImmutableSet&lt;TransportMode&gt;, textColor: Color, modifier: Modifier = Modifier, onClick: (StopItem) -&gt; Unit = {}, )</ID>
    <ID>FunctionNaming:StopSearchListItem.kt$@Composable private fun StopSearchListItemLongNamePreview()</ID>
    <ID>FunctionNaming:StopSearchListItem.kt$@Composable private fun StopSearchListItemPreview()</ID>
    <ID>FunctionNaming:TagLineWithEmoji.kt$@Composable internal fun TagLineWithEmoji( tagline: String, emoji: String, emojiColor: Color? = null, tagColor: Color? = null, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:ThemeSelectionRadioButton.kt$@Composable fun ThemeSelectionRadioButton( themeStyle: KrailThemeStyle, onClick: (KrailThemeStyle) -&gt; Unit, modifier: Modifier = Modifier, selected: Boolean = false, )</ID>
    <ID>FunctionNaming:ThemeSelectionRadioButton.kt$@Preview @Composable private fun ThemeSelectionRadioButtonPreview()</ID>
    <ID>FunctionNaming:ThemeSelectionRadioButton.kt$@Preview @Composable private fun ThemeSelectionRadioButtonUnselectedPreview()</ID>
    <ID>FunctionNaming:ThemeSelectionScreen.kt$@Composable fun ThemeSelectionScreen( selectedThemeStyle: KrailThemeStyle?, onThemeSelected: (Int) -&gt; Unit, onBackClick: () -&gt; Unit, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:TimePicker.kt$@Composable @OptIn(ExperimentalMaterial3Api::class) fun KrailTimePicker( timePickerState: TimePickerState, )</ID>
    <ID>FunctionNaming:TimeSelection.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun TimeSelection( timePickerState: TimePickerState, modifier: Modifier = Modifier, displayTitle: Boolean = true, )</ID>
    <ID>FunctionNaming:TimeTableScreen.kt$@Composable // todo - probably don't need this private fun JourneyCardItem( timeToDeparture: String, platformNumber: String?, platformText: String?, originTime: String, durationText: String, totalWalkTime: String?, destinationTime: String, onClick: () -&gt; Unit, cardState: JourneyCardState, legList: ImmutableList&lt;TimeTableState.JourneyCardInfo.Leg&gt;, onAlertClick: () -&gt; Unit, totalUniqueServiceAlerts: Int, modifier: Modifier = Modifier, transportModeLineList: ImmutableList&lt;TransportModeLine&gt;? = null, onLegClick: (Boolean) -&gt; Unit, departureDeviation: TimeTableState.JourneyCardInfo.DepartureDeviation? = null, )</ID>
    <ID>FunctionNaming:TimeTableScreen.kt$@Composable fun ActionButton( onClick: () -&gt; Unit, contentDescription: String, modifier: Modifier = Modifier, content: @Composable () -&gt; Unit, )</ID>
    <ID>FunctionNaming:TimeTableScreen.kt$@Composable fun TimeTableScreen( timeTableState: TimeTableState, expandedJourneyId: String?, dateTimeSelectionItem: DateTimeSelectionItem?, onEvent: (TimeTableUiEvent) -&gt; Unit, onAlertClick: (String) -&gt; Unit, onBackClick: () -&gt; Unit, onJourneyLegClick: (Boolean) -&gt; Unit, modifier: Modifier = Modifier, dateTimeSelectorClicked: () -&gt; Unit = {}, onModeSelectionChanged: (Set&lt;Int&gt;) -&gt; Unit = {}, onModeClick: (Boolean) -&gt; Unit = {}, )</ID>
    <ID>FunctionNaming:TimeTableScreen.kt$@Composable private fun PreviewTimeTableScreen()</ID>
    <ID>FunctionNaming:TimeTableScreen.kt$@Composable private fun PreviewTimeTableScreenError()</ID>
    <ID>FunctionNaming:TimeTableScreen.kt$@Composable private fun PreviewTimeTableScreenNoResults()</ID>
    <ID>FunctionNaming:TransportModeBadge.kt$@Composable fun TransportModeBadge( badgeText: String, backgroundColor: Color, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:TransportModeBadge.kt$@Composable private fun TransportModeBadgeFerryPreview()</ID>
    <ID>FunctionNaming:TransportModeBadge.kt$@Composable private fun TransportModeBadgeTrainPreview()</ID>
    <ID>FunctionNaming:TransportModeBadge.kt$@Preview @Composable private fun TransportModeBadgeBusPreview()</ID>
    <ID>FunctionNaming:TransportModeChip.kt$@Composable fun TransportModeChip( transportMode: TransportMode, selected: Boolean, onClick: () -&gt; Unit, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:TransportModeIcon.kt$@Composable fun TransportModeIcon( transportMode: TransportMode, modifier: Modifier = Modifier, borderColor: Color = Color.White, displayBorder: Boolean = false, size: TransportModeIconSize = TransportModeIconSize.Medium, )</ID>
    <ID>FunctionNaming:TransportModeIcon.kt$@Preview(group = previewGroupName) @Composable private fun BusPreview()</ID>
    <ID>FunctionNaming:TransportModeIcon.kt$@Preview(group = previewGroupName) @Composable private fun FerryPreview()</ID>
    <ID>FunctionNaming:TransportModeIcon.kt$@Preview(group = previewGroupName) @Composable private fun LightRailPreview()</ID>
    <ID>FunctionNaming:TransportModeIcon.kt$@Preview(group = previewGroupName) @Composable private fun MetroPreview()</ID>
    <ID>FunctionNaming:TransportModeIcon.kt$@Preview(group = previewGroupName) @Composable private fun TrainPreview()</ID>
    <ID>FunctionNaming:TransportModeIcon.kt$@Preview(group = previewGroupName) @Composable private fun TrainPreviewLarge()</ID>
    <ID>FunctionNaming:TransportModeIcon.kt$@Preview(group = previewWithBackground) @Composable private fun BusWithBackgroundPreview()</ID>
    <ID>FunctionNaming:TransportModeIcon.kt$@Preview(group = previewWithBackground) @Composable private fun FerryWithBackgroundPreview()</ID>
    <ID>FunctionNaming:TransportModeIcon.kt$@Preview(group = previewWithBackground) @Composable private fun LightRailWithBackgroundPreview()</ID>
    <ID>FunctionNaming:TransportModeIcon.kt$@Preview(group = previewWithBackground) @Composable private fun MetroWithBackgroundPreview()</ID>
    <ID>FunctionNaming:TransportModeIcon.kt$@Preview(group = previewWithBackground) @Composable private fun TrainWithBackgroundPreview()</ID>
    <ID>FunctionNaming:TransportModeInfo.kt$@Composable fun TransportModeInfo( transportMode: TransportMode, modifier: Modifier = Modifier, borderEnabled: Boolean = false, )</ID>
    <ID>FunctionNaming:TransportModeInfo.kt$@Preview @Composable private fun TransportModeInfoPreview()</ID>
    <ID>FunctionNaming:TransportModeInfo.kt$@Preview @Composable private fun TransportModeInfoPreview_LargeFont()</ID>
    <ID>FunctionNaming:WalkingLeg.kt$@Composable fun WalkingLeg( duration: String, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:WalkingLeg.kt$@Preview @Composable private fun PreviewWalkingLeg()</ID>
    <ID>ImportOrdering:DateTimeSelectorScreen.kt$import androidx.compose.foundation.background import androidx.compose.foundation.layout.Column import androidx.compose.foundation.layout.PaddingValues import androidx.compose.foundation.layout.fillMaxSize import androidx.compose.foundation.layout.padding import androidx.compose.foundation.layout.systemBarsPadding import androidx.compose.foundation.lazy.LazyColumn import androidx.compose.material3.ExperimentalMaterial3Api import androidx.compose.material3.rememberTimePickerState import androidx.compose.runtime.Composable import androidx.compose.runtime.LaunchedEffect import androidx.compose.runtime.getValue import androidx.compose.runtime.mutableStateOf import androidx.compose.runtime.remember import androidx.compose.runtime.saveable.rememberSaveable import androidx.compose.runtime.setValue import androidx.compose.ui.Alignment import androidx.compose.ui.Modifier import androidx.compose.ui.unit.dp import kotlin.time.Clock import kotlinx.datetime.DateTimeUnit import kotlinx.datetime.LocalDate import kotlinx.datetime.LocalDateTime import kotlinx.datetime.TimeZone import kotlinx.datetime.plus import kotlinx.datetime.toLocalDateTime import xyz.ksharma.krail.core.datetime.decrementDateByOneDay import xyz.ksharma.krail.core.datetime.incrementDateByOneDay import xyz.ksharma.krail.core.datetime.rememberCurrentDateTime import xyz.ksharma.krail.core.datetime.toReadableDate import xyz.ksharma.krail.taj.LocalThemeColor import xyz.ksharma.krail.taj.components.Button import xyz.ksharma.krail.taj.components.ButtonDefaults import xyz.ksharma.krail.taj.components.Text import xyz.ksharma.krail.taj.components.TextButton import xyz.ksharma.krail.taj.components.TitleBar import xyz.ksharma.krail.taj.hexToComposeColor import xyz.ksharma.krail.taj.theme.KrailTheme import xyz.ksharma.krail.trip.planner.ui.state.datetimeselector.DateTimeSelectionItem import xyz.ksharma.krail.trip.planner.ui.state.datetimeselector.JourneyTimeOptions import kotlin.time.ExperimentalTime</ID>
    <ID>ImportOrdering:IntroContentInviteFriends.kt$import androidx.compose.foundation.Image import androidx.compose.foundation.background import androidx.compose.foundation.clickable import androidx.compose.foundation.interaction.MutableInteractionSource import androidx.compose.foundation.layout.Arrangement import androidx.compose.foundation.layout.Box import androidx.compose.foundation.layout.Column import androidx.compose.foundation.layout.fillMaxWidth import androidx.compose.foundation.layout.size import androidx.compose.foundation.rememberScrollState import androidx.compose.foundation.shape.CircleShape import androidx.compose.foundation.verticalScroll import androidx.compose.runtime.Composable import androidx.compose.runtime.remember import androidx.compose.ui.Alignment import androidx.compose.ui.Modifier import androidx.compose.ui.draw.clip import androidx.compose.ui.graphics.Color import androidx.compose.ui.graphics.ColorFilter import androidx.compose.ui.semantics.Role import androidx.compose.ui.unit.dp import app.krail.taj.resources.Res as TajRes import app.krail.taj.resources.ic_android_share import app.krail.taj.resources.ic_ios_share import org.jetbrains.compose.resources.painterResource import xyz.ksharma.krail.core.appinfo.DevicePlatformType import xyz.ksharma.krail.core.appinfo.getAppPlatformType import xyz.ksharma.krail.taj.components.Text import xyz.ksharma.krail.taj.hexToComposeColor import xyz.ksharma.krail.taj.theme.KrailTheme</ID>
    <ID>ImportOrdering:ParkRideMapper.kt$import androidx.annotation.VisibleForTesting import androidx.annotation.VisibleForTesting.Companion.PACKAGE_PRIVATE import kotlinx.collections.immutable.toImmutableSet import kotlin.time.Clock import xyz.ksharma.krail.core.datetime.DateTimeHelper.toSimple12HourTime import xyz.ksharma.krail.core.log.log import xyz.ksharma.krail.park.ride.network.model.CarParkFacilityDetailResponse import xyz.ksharma.krail.sandook.NSWParkRideFacilityDetail import xyz.ksharma.krail.trip.planner.ui.state.savedtrip.ParkRideUiState import xyz.ksharma.krail.trip.planner.ui.state.savedtrip.ParkRideUiState.ParkRideFacilityDetail import kotlin.time.ExperimentalTime</ID>
    <ID>ImportOrdering:SearchStopRow.kt$import androidx.compose.animation.AnimatedContent import androidx.compose.animation.core.EaseOutBounce import androidx.compose.animation.core.animateFloatAsState import androidx.compose.animation.core.tween import androidx.compose.animation.fadeIn import androidx.compose.animation.fadeOut import androidx.compose.animation.slideInVertically import androidx.compose.animation.slideOutVertically import androidx.compose.animation.togetherWith import androidx.compose.foundation.Image import androidx.compose.foundation.background import androidx.compose.foundation.layout.Arrangement import androidx.compose.foundation.layout.Column import androidx.compose.foundation.layout.Row import androidx.compose.foundation.layout.WindowInsets import androidx.compose.foundation.layout.fillMaxWidth import androidx.compose.foundation.layout.navigationBars import androidx.compose.foundation.layout.padding import androidx.compose.foundation.layout.size import androidx.compose.foundation.shape.RoundedCornerShape import androidx.compose.runtime.Composable import androidx.compose.runtime.CompositionLocalProvider import androidx.compose.runtime.getValue import androidx.compose.runtime.mutableStateOf import androidx.compose.runtime.remember import androidx.compose.runtime.saveable.rememberSaveable import androidx.compose.runtime.setValue import androidx.compose.ui.Alignment import androidx.compose.ui.Modifier import androidx.compose.ui.graphics.ColorFilter import androidx.compose.ui.graphics.graphicsLayer import androidx.compose.ui.platform.LocalDensity import androidx.compose.ui.unit.dp import krail.feature.trip_planner.ui.generated.resources.Res import krail.feature.trip_planner.ui.generated.resources.ic_reverse import krail.feature.trip_planner.ui.generated.resources.ic_search import org.jetbrains.compose.resources.painterResource import xyz.ksharma.krail.taj.LocalContentColor import xyz.ksharma.krail.taj.LocalThemeColor import xyz.ksharma.krail.taj.components.ThemeTextFieldPlaceholderText import xyz.ksharma.krail.taj.components.RoundIconButton import xyz.ksharma.krail.taj.components.TextFieldButton import xyz.ksharma.krail.taj.hexToComposeColor import xyz.ksharma.krail.taj.theme.KrailTheme import xyz.ksharma.krail.trip.planner.ui.state.TransportMode import xyz.ksharma.krail.trip.planner.ui.state.searchstop.model.StopItem</ID>
    <ID>Indentation:DiscoverScreen.kt$ </ID>
    <ID>Indentation:LegView.kt$ </ID>
    <ID>Indentation:ParkRideMapper.kt$ </ID>
    <ID>Indentation:SavedTripsViewModel.kt$SavedTripsViewModel$ </ID>
    <ID>Indentation:SearchStopRow.kt$ </ID>
    <ID>Indentation:SearchStopScreen.kt$ </ID>
    <ID>Indentation:ThemeSelectionRadioButton.kt$ </ID>
    <ID>Indentation:TripResponseMapper.kt$ </ID>
    <ID>LambdaParameterEventTrailing:DiscoverScreen.kt$onChipSelected</ID>
    <ID>LambdaParameterEventTrailing:JourneyCard.kt$onClick</ID>
    <ID>LambdaParameterEventTrailing:JourneyTimeOptionsGroup.kt$onOptionSelected</ID>
    <ID>LambdaParameterEventTrailing:LegView.kt$onClick</ID>
    <ID>LongMethod:CollapsibleAlert.kt$@Composable fun CollapsibleAlert( serviceAlert: ServiceAlert, index: Int, onClick: () -&gt; Unit, modifier: Modifier = Modifier, collapsed: Boolean = true, )</ID>
    <ID>LongMethod:DateTimeSelectorScreen.kt$@OptIn(ExperimentalMaterial3Api::class, ExperimentalTime::class) @Composable fun DateTimeSelectorScreen( dateTimeSelection: DateTimeSelectionItem?, modifier: Modifier = Modifier, onBackClick: () -&gt; Unit = {}, onDateTimeSelected: (DateTimeSelectionItem?) -&gt; Unit = {}, onResetClick: () -&gt; Unit = {}, )</ID>
    <ID>LongMethod:DiscoverChip.kt$@Composable fun DiscoverChip( type: DiscoverCardType, selected: Boolean, modifier: Modifier = Modifier, horizontalPadding: Dp = DiscoverChipDefaults.ChipHorizontalPadding, verticalPadding: Dp = DiscoverChipDefaults.ChipVerticalPadding, )</ID>
    <ID>LongMethod:DiscoverScreen.kt$@Composable fun DiscoverScreenCompact( modifier: Modifier = Modifier, state: DiscoverState, onBackClick: () -&gt; Unit, onAppSocialLinkClicked: (KrailSocialType) -&gt; Unit, onPartnerSocialLinkClicked: (Button.Social.PartnerSocial.PartnerSocialLink, String, DiscoverCardType) -&gt; Unit, onCtaClicked: (url: String, cardId: String, cardType: DiscoverCardType) -&gt; Unit, onShareClick: (cardId: String, cardType: DiscoverCardType) -&gt; Unit, onCardSeen: (cardId: String) -&gt; Unit, resetAllSeenCards: () -&gt; Unit, onChipSelected: (DiscoverCardType) -&gt; Unit, )</ID>
    <ID>LongMethod:DiscoverScreen.kt$@Composable fun DiscoverScreenTablet( modifier: Modifier = Modifier, state: DiscoverState, onBackClick: () -&gt; Unit, onAppSocialLinkClicked: (KrailSocialType) -&gt; Unit, onPartnerSocialLinkClicked: (Button.Social.PartnerSocial.PartnerSocialLink, String, DiscoverCardType) -&gt; Unit, onCtaClicked: (url: String, cardId: String, cardType: DiscoverCardType) -&gt; Unit, onShareClick: (cardId: String, cardType: DiscoverCardType) -&gt; Unit, onCardSeen: (cardId: String) -&gt; Unit, resetAllSeenCards: () -&gt; Unit, onChipSelected: (DiscoverCardType) -&gt; Unit, )</ID>
    <ID>LongMethod:IntroContentPlanTrip.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun IntroContentPlanTrip( tagline: String, style: String, // hexCode modifier: Modifier = Modifier, )</ID>
    <ID>LongMethod:IntroContentSaveTrips.kt$@Composable fun IntroContentSaveTrips( tagline: String, style: String, // hexCode - // todo - see if it can be color instead. modifier: Modifier = Modifier, )</ID>
    <ID>LongMethod:IntroContentSelectTransportMode.kt$@Composable fun IntroContentSelectTransportMode( tagline: String, style: String, // hexCode - // todo - see if it can be color instead. modifier: Modifier = Modifier, )</ID>
    <ID>LongMethod:IntroScreen.kt$@Composable fun IntroScreen( state: IntroState, modifier: Modifier = Modifier, onIntroComplete: (pageType: IntroPageType, pageNumber: Int) -&gt; Unit = { _, _ -&gt; }, onEvent: (IntroUiEvent) -&gt; Unit = {}, )</ID>
    <ID>LongMethod:JourneyCard.kt$@Composable fun ExpandedJourneyCardContent( totalTravelTime: String, legList: ImmutableList&lt;TimeTableState.JourneyCardInfo.Leg&gt;, totalUniqueServiceAlerts: Int, onAlertClick: () -&gt; Unit, onLegClick: (Boolean) -&gt; Unit, modifier: Modifier = Modifier, )</ID>
    <ID>LongMethod:JourneyCard.kt$@Composable fun JourneyCard( timeToDeparture: String, platformNumber: String?, platformText: String?, originTime: String, destinationTime: String, totalTravelTime: String, legList: ImmutableList&lt;TimeTableState.JourneyCardInfo.Leg&gt;, transportModeLineList: ImmutableList&lt;TransportModeLine&gt;, onClick: () -&gt; Unit, cardState: JourneyCardState, totalWalkTime: String?, totalUniqueServiceAlerts: Int, modifier: Modifier = Modifier, onAlertClick: () -&gt; Unit = {}, onLegClick: (Boolean) -&gt; Unit = {}, departureDeviation: TimeTableState.JourneyCardInfo.DepartureDeviation? = null, )</ID>
    <ID>LongMethod:JourneyCard.kt$@Composable private fun JourneyCardHeader( transportModeLineList: ImmutableList&lt;TransportModeLine&gt;, platformText: String?, timeToDeparture: String, firstLegTransportModeColor: Color, modifier: Modifier = Modifier, onClick: () -&gt; Unit, )</ID>
    <ID>LongMethod:JourneyCard.kt$@Composable private fun ResponsiveJourneyInfoRow( destinationTime: String, totalTravelTime: String, totalWalkTime: String?, departureDeviation: TimeTableState.JourneyCardInfo.DepartureDeviation?, )</ID>
    <ID>LongMethod:LegView.kt$@Composable fun LegView( routeText: String?, // AVC via XYZ transportModeLine: TransportModeLine, stops: ImmutableList&lt;TimeTableState.JourneyCardInfo.Stop&gt;, modifier: Modifier = Modifier, displayAllStops: Boolean = false, onClick: () -&gt; Unit = {}, )</ID>
    <ID>LongMethod:OriginDestination.kt$@Composable internal fun OriginDestination( trip: Trip, timeLineColor: Color, modifier: Modifier = Modifier, )</ID>
    <ID>LongMethod:ParkRideCard.kt$@Composable fun ParkRideCard( parkRideUiState: ParkRideUiState, isExpanded: Boolean, modifier: Modifier = Modifier, onClick: () -&gt; Unit = {}, )</ID>
    <ID>LongMethod:ParkRideContent.kt$@Composable fun ParkRideLoadedContent( parkRideFacilityDetail: ParkRideFacilityDetail, modifier: Modifier = Modifier, )</ID>
    <ID>LongMethod:SavedTripsScreen.kt$@Composable fun SavedTripsScreen( savedTripsState: SavedTripsState, modifier: Modifier = Modifier, fromButtonClick: () -&gt; Unit = {}, toButtonClick: () -&gt; Unit = {}, onReverseButtonClick: () -&gt; Unit = {}, onSavedTripCardClick: (StopItem?, StopItem?) -&gt; Unit = { _, _ -&gt; }, onSearchButtonClick: () -&gt; Unit = {}, onSettingsButtonClick: () -&gt; Unit = {}, onDiscoverButtonClick: () -&gt; Unit = {}, onEvent: (SavedTripUiEvent) -&gt; Unit = {}, )</ID>
    <ID>LongMethod:SavedTripsScreen.kt$private fun LazyListScope.savedTripsContent( savedTripsState: SavedTripsState, onEvent: (SavedTripUiEvent) -&gt; Unit, onSavedTripCardClick: (StopItem?, StopItem?) -&gt; Unit = { _, _ -&gt; }, expandedMap: SnapshotStateMap&lt;String, Boolean&gt;, )</ID>
    <ID>LongMethod:SearchStopRow.kt$@Composable fun SearchStopRow( fromButtonClick: () -&gt; Unit, toButtonClick: () -&gt; Unit, modifier: Modifier = Modifier, fromStopItem: StopItem? = null, toStopItem: StopItem? = null, onReverseButtonClick: () -&gt; Unit = {}, onSearchButtonClick: () -&gt; Unit = {}, )</ID>
    <ID>LongMethod:SearchStopScreen.kt$@OptIn(FlowPreview::class, ExperimentalCoroutinesApi::class, ExperimentalTime::class) @Composable fun SearchStopScreen( searchStopState: SearchStopState, modifier: Modifier = Modifier, searchQuery: String = "", goBack: () -&gt; Unit = {}, onStopSelect: (StopItem) -&gt; Unit = {}, onEvent: (SearchStopUiEvent) -&gt; Unit = {}, )</ID>
    <ID>LongMethod:SettingsScreen.kt$@Composable fun SettingsScreen( appVersion: String, modifier: Modifier = Modifier, onBackClick: () -&gt; Unit = {}, onChangeThemeClick: () -&gt; Unit = {}, onReferFriendClick: () -&gt; Unit = {}, onAboutUsClick: () -&gt; Unit = {}, onIntroClick: () -&gt; Unit = {}, onSocialLinkClick: (KrailSocialType) -&gt; Unit = {}, )</ID>
    <ID>LongMethod:ThemeSelectionRadioButton.kt$@Composable fun ThemeSelectionRadioButton( themeStyle: KrailThemeStyle, onClick: (KrailThemeStyle) -&gt; Unit, modifier: Modifier = Modifier, selected: Boolean = false, )</ID>
    <ID>LongMethod:ThemeSelectionScreen.kt$@Composable fun ThemeSelectionScreen( selectedThemeStyle: KrailThemeStyle?, onThemeSelected: (Int) -&gt; Unit, onBackClick: () -&gt; Unit, modifier: Modifier = Modifier, )</ID>
    <ID>LongMethod:TimeTableDestination.kt$internal fun NavGraphBuilder.timeTableDestination(navController: NavHostController)</ID>
    <ID>LongMethod:TimeTableScreen.kt$@Composable fun TimeTableScreen( timeTableState: TimeTableState, expandedJourneyId: String?, dateTimeSelectionItem: DateTimeSelectionItem?, onEvent: (TimeTableUiEvent) -&gt; Unit, onAlertClick: (String) -&gt; Unit, onBackClick: () -&gt; Unit, onJourneyLegClick: (Boolean) -&gt; Unit, modifier: Modifier = Modifier, dateTimeSelectorClicked: () -&gt; Unit = {}, onModeSelectionChanged: (Set&lt;Int&gt;) -&gt; Unit = {}, onModeClick: (Boolean) -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:DiscoverScreen.kt$( modifier: Modifier = Modifier, state: DiscoverState, onBackClick: () -&gt; Unit, onAppSocialLinkClicked: (KrailSocialType) -&gt; Unit, onPartnerSocialLinkClicked: (Button.Social.PartnerSocial.PartnerSocialLink, String, DiscoverCardType) -&gt; Unit, onCtaClicked: (url: String, cardId: String, cardType: DiscoverCardType) -&gt; Unit, onShareClick: (cardId: String, cardType: DiscoverCardType) -&gt; Unit, onCardSeen: (cardId: String) -&gt; Unit, resetAllSeenCards: () -&gt; Unit, onChipSelected: (DiscoverCardType) -&gt; Unit, )</ID>
    <ID>LongParameterList:IntroScreen.kt$( offsetFraction: Float, state: IntroState, startPage: Int, animatedButtonColor: Color, animatedAlpha: Float, targetPage: Int )</ID>
    <ID>LongParameterList:JourneyCard.kt$( originTime: String, destinationTime: String, totalTravelTime: String, totalWalkTime: String?, modifier: Modifier = Modifier, departureDeviation: TimeTableState.JourneyCardInfo.DepartureDeviation? = null, )</ID>
    <ID>LongParameterList:JourneyCard.kt$( timeToDeparture: String, platformNumber: String?, platformText: String?, originTime: String, destinationTime: String, totalTravelTime: String, legList: ImmutableList&lt;TimeTableState.JourneyCardInfo.Leg&gt;, transportModeLineList: ImmutableList&lt;TransportModeLine&gt;, onClick: () -&gt; Unit, cardState: JourneyCardState, totalWalkTime: String?, totalUniqueServiceAlerts: Int, modifier: Modifier = Modifier, onAlertClick: () -&gt; Unit = {}, onLegClick: (Boolean) -&gt; Unit = {}, departureDeviation: TimeTableState.JourneyCardInfo.DepartureDeviation? = null, )</ID>
    <ID>LongParameterList:JourneyCard.kt$( totalTravelTime: String, legList: ImmutableList&lt;TimeTableState.JourneyCardInfo.Leg&gt;, totalUniqueServiceAlerts: Int, onAlertClick: () -&gt; Unit, onLegClick: (Boolean) -&gt; Unit, modifier: Modifier = Modifier, )</ID>
    <ID>LongParameterList:JourneyCard.kt$( transportModeLineList: ImmutableList&lt;TransportModeLine&gt;, platformText: String?, timeToDeparture: String, firstLegTransportModeColor: Color, modifier: Modifier = Modifier, onClick: () -&gt; Unit, )</ID>
    <ID>LongParameterList:LegView.kt$( routeText: String?, // AVC via XYZ transportModeLine: TransportModeLine, stops: ImmutableList&lt;TimeTableState.JourneyCardInfo.Stop&gt;, modifier: Modifier = Modifier, displayAllStops: Boolean = false, onClick: () -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:OutlineRadioButton.kt$( text: String, themeColor: Color, modifier: Modifier = Modifier, type: RadioButtonType = RadioButtonType.DEFAULT, selected: Boolean = false, enabled: Boolean = true, onClick: () -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:SavedTripsScreen.kt$( savedTripsState: SavedTripsState, modifier: Modifier = Modifier, fromButtonClick: () -&gt; Unit = {}, toButtonClick: () -&gt; Unit = {}, onReverseButtonClick: () -&gt; Unit = {}, onSavedTripCardClick: (StopItem?, StopItem?) -&gt; Unit = { _, _ -&gt; }, onSearchButtonClick: () -&gt; Unit = {}, onSettingsButtonClick: () -&gt; Unit = {}, onDiscoverButtonClick: () -&gt; Unit = {}, onEvent: (SavedTripUiEvent) -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:SavedTripsViewModel.kt$SavedTripsViewModel$( private val sandook: Sandook, private val analytics: Analytics, private val ioDispatcher: CoroutineDispatcher, private val nswParkRideFacilityManager: NswParkRideFacilityManager, private val parkRideService: ParkRideService, private val parkRideSandook: NswParkRideSandook, private val stopResultsManager: StopResultsManager, private val flag: Flag, private val preferences: SandookPreferences, private val infoTileManager: InfoTileManager, private val platformOps: PlatformOps, )</ID>
    <ID>LongParameterList:SearchStopRow.kt$( fromButtonClick: () -&gt; Unit, toButtonClick: () -&gt; Unit, modifier: Modifier = Modifier, fromStopItem: StopItem? = null, toStopItem: StopItem? = null, onReverseButtonClick: () -&gt; Unit = {}, onSearchButtonClick: () -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:SearchStopScreen.kt$( searchStopState: SearchStopState, modifier: Modifier = Modifier, searchQuery: String = "", goBack: () -&gt; Unit = {}, onStopSelect: (StopItem) -&gt; Unit = {}, onEvent: (SearchStopUiEvent) -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:SettingsScreen.kt$( appVersion: String, modifier: Modifier = Modifier, onBackClick: () -&gt; Unit = {}, onChangeThemeClick: () -&gt; Unit = {}, onReferFriendClick: () -&gt; Unit = {}, onAboutUsClick: () -&gt; Unit = {}, onIntroClick: () -&gt; Unit = {}, onSocialLinkClick: (KrailSocialType) -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:SettingsScreen.kt$( icon: Painter, text: String, modifier: Modifier = Modifier, showDivider: Boolean = true, detailContent: (@Composable () -&gt; Unit)? = null, onClick: (() -&gt; Unit)? = null, )</ID>
    <ID>LongParameterList:StopSearchListItem.kt$( stopName: String, stopId: String, transportModeSet: ImmutableSet&lt;TransportMode&gt;, textColor: Color, modifier: Modifier = Modifier, onClick: (StopItem) -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:TimeTableScreen.kt$( timeTableState: TimeTableState, expandedJourneyId: String?, dateTimeSelectionItem: DateTimeSelectionItem?, onEvent: (TimeTableUiEvent) -&gt; Unit, onAlertClick: (String) -&gt; Unit, onBackClick: () -&gt; Unit, onJourneyLegClick: (Boolean) -&gt; Unit, modifier: Modifier = Modifier, dateTimeSelectorClicked: () -&gt; Unit = {}, onModeSelectionChanged: (Set&lt;Int&gt;) -&gt; Unit = {}, onModeClick: (Boolean) -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:TimeTableScreen.kt$( timeToDeparture: String, platformNumber: String?, platformText: String?, originTime: String, durationText: String, totalWalkTime: String?, destinationTime: String, onClick: () -&gt; Unit, cardState: JourneyCardState, legList: ImmutableList&lt;TimeTableState.JourneyCardInfo.Leg&gt;, onAlertClick: () -&gt; Unit, totalUniqueServiceAlerts: Int, modifier: Modifier = Modifier, transportModeLineList: ImmutableList&lt;TransportModeLine&gt;? = null, onLegClick: (Boolean) -&gt; Unit, departureDeviation: TimeTableState.JourneyCardInfo.DepartureDeviation? = null, )</ID>
    <ID>MagicNumber:A11yExt.kt$1.4f</ID>
    <ID>MagicNumber:AnimatedDots.kt$10f</ID>
    <ID>MagicNumber:AnimatedDots.kt$40f</ID>
    <ID>MagicNumber:AnimatedDots.kt$600</ID>
    <ID>MagicNumber:DateTimeSelectorScreen.kt$7</ID>
    <ID>MagicNumber:DiscoverChip.kt$4</ID>
    <ID>MagicNumber:DiscoverChip.kt$50</ID>
    <ID>MagicNumber:DiscoverScreen.kt$3</ID>
    <ID>MagicNumber:DiscoverScreen.kt$4</ID>
    <ID>MagicNumber:GradientBorder.kt$0xFF888888</ID>
    <ID>MagicNumber:IntroContentAlerts.kt$2000</ID>
    <ID>MagicNumber:IntroContentPlanTrip.kt$0.6f</ID>
    <ID>MagicNumber:IntroContentPlanTrip.kt$1.5f</ID>
    <ID>MagicNumber:IntroContentPlanTrip.kt$10</ID>
    <ID>MagicNumber:IntroContentPlanTrip.kt$2.5f</ID>
    <ID>MagicNumber:IntroContentPlanTrip.kt$2500</ID>
    <ID>MagicNumber:IntroContentRealTime.kt$2000</ID>
    <ID>MagicNumber:IntroContentSaveTrips.kt$200</ID>
    <ID>MagicNumber:IntroParkRide.kt$2000</ID>
    <ID>MagicNumber:IntroScreen.kt$0.5f</ID>
    <ID>MagicNumber:IntroScreen.kt$0.6f</ID>
    <ID>MagicNumber:IntroScreen.kt$0.75f</ID>
    <ID>MagicNumber:JourneyCard.kt$0.5f</ID>
    <ID>MagicNumber:LoadingEmojiAnim.kt$200</ID>
    <ID>MagicNumber:LoadingEmojiAnim.kt$2000</ID>
    <ID>MagicNumber:LoadingEmojiAnim.kt$3</ID>
    <ID>MagicNumber:LoadingEmojiAnim.kt$360f</ID>
    <ID>MagicNumber:OriginDestination.kt$200</ID>
    <ID>MagicNumber:OriginDestination.kt$500</ID>
    <ID>MagicNumber:RealStopResultsManager.kt$RealStopResultsManager$50</ID>
    <ID>MagicNumber:SavedTripsScreen.kt$300</ID>
    <ID>MagicNumber:SavedTripsViewModel.kt$SavedTripsViewModel$10</ID>
    <ID>MagicNumber:SavedTripsViewModel.kt$SavedTripsViewModel$5</ID>
    <ID>MagicNumber:SearchStopRow.kt$200</ID>
    <ID>MagicNumber:SearchStopRow.kt$500</ID>
    <ID>MagicNumber:SearchStopScreen.kt$1500</ID>
    <ID>MagicNumber:SearchStopScreen.kt$250</ID>
    <ID>MagicNumber:SearchStopScreen.kt$3</ID>
    <ID>MagicNumber:SearchStopScreen.kt$4</ID>
    <ID>MagicNumber:SearchStopScreen.kt$500</ID>
    <ID>MagicNumber:ThemeSelectionRadioButton.kt$1.2f</ID>
    <ID>MagicNumber:ThemeSelectionRadioButton.kt$3</ID>
    <ID>MagicNumber:ThemeSelectionRadioButton.kt$900</ID>
    <ID>MagicNumber:ThemeSelectionScreen.kt$150L</ID>
    <ID>MagicNumber:TimeSelection.kt$0.6f</ID>
    <ID>MagicNumber:TimeSelection.kt$1.5f</ID>
    <ID>MagicNumber:TimeSelection.kt$3f</ID>
    <ID>MagicNumber:TransportModeChip.kt$200</ID>
    <ID>MagicNumber:TransportModeChip.kt$50</ID>
    <ID>MagicNumber:TripResponseMapper.kt$99L</ID>
    <ID>MaxLineLength:DiscoverChip.kt$color = if (selected) if (isSystemInDarkTheme()) themeColor().darken() else themeColor() else KrailTheme.colors.discoverChipBackground</ID>
    <ID>MaxLineLength:SavedTripsViewModel.kt$SavedTripsViewModel$"Park Ride card collapsed for stopId: ${parkRideState.stopId} , facilities: ${parkRideState.facilities.joinToString()}"</ID>
    <ID>MaxLineLength:SavedTripsViewModel.kt$SavedTripsViewModel$"Park Ride card expanded for stopId: ${parkRideState.stopId} , facilities: ${parkRideState.facilities.joinToString()}"</ID>
    <ID>MaxLineLength:TimePicker.kt$periodSelectorSelectedContainerColor = themeColor</ID>
    <ID>MaxLineLength:TimePicker.kt$periodSelectorSelectedContentColor = themeContentColor</ID>
    <ID>MaxLineLength:TimePicker.kt$periodSelectorUnselectedContainerColor = KrailTheme.colors.surface</ID>
    <ID>MaxLineLength:TimePicker.kt$timeSelectorSelectedContentColor = themeContentColor</ID>
    <ID>MaxLineLength:TimePicker.kt$timeSelectorUnselectedContainerColor = KrailTheme.colors.surface</ID>
    <ID>MaximumLineLength:DiscoverChip.kt$ </ID>
    <ID>MaximumLineLength:SavedTripsViewModel.kt$SavedTripsViewModel$ </ID>
    <ID>MaximumLineLength:TimePicker.kt$ </ID>
    <ID>ModifierMissing:IntroContentAlerts.kt$AnimatedAlertsOneByOne</ID>
    <ID>ModifierMissing:TimePicker.kt$KrailTimePicker</ID>
    <ID>ModifierNotUsedAtRoot:DiscoverScreen.kt$modifier = modifier.fillMaxSize()</ID>
    <ID>ModifierWithoutDefault:IntroParkRide.kt$modifier</ID>
    <ID>ModifierWithoutDefault:SearchStopScreen.kt$modifier</ID>
    <ID>MultiLineIfElse:LegView.kt$KrailTheme.colors.onSurface</ID>
    <ID>MultiLineIfElse:LegView.kt$KrailTheme.colors.onSurface.copy( alpha = 0.75f )</ID>
    <ID>MultiLineIfElse:LegView.kt$emptyMap()</ID>
    <ID>MultiLineIfElse:ParkRideMapper.kt$null</ID>
    <ID>MultiLineIfElse:ThemeSelectionRadioButton.kt$Modifier</ID>
    <ID>MultiLineIfElse:ThemeSelectionRadioButton.kt$Modifier.drawBehind { val color = themeStyle.hexColorCode.hexToComposeColor() withTransform({ scale(pulseScale, pulseScale, pivot = center) }) { drawCircle( color = color.copy(alpha = pulseAlpha), radius = size.minDimension / 2 ) } }</ID>
    <ID>MutableStateAutoboxing:IntroContentPlanTrip.kt$mutableStateOf(0)</ID>
    <ID>MutableStateAutoboxing:IntroContentSaveTrips.kt$mutableStateOf(1f)</ID>
    <ID>MutableStateAutoboxing:SearchStopScreen.kt$mutableStateOf(0)</ID>
    <ID>MutableStateAutoboxing:ThemeSelectionRadioButton.kt$mutableStateOf(0f)</ID>
    <ID>NoBlankLineBeforeRbrace:SavedTripsViewModel.kt$SavedTripsViewModel$ </ID>
    <ID>NoBlankLineBeforeRbrace:SearchStopViewModel.kt$SearchStopViewModel$ </ID>
    <ID>NoBlankLinesInChainedMethodCalls:DiscoverViewModel.kt$DiscoverViewModel$ </ID>
    <ID>NoConsecutiveBlankLines:ParkRideIcon.kt$ </ID>
    <ID>NoConsecutiveBlankLines:RealStopResultsManager.kt$RealStopResultsManager$ </ID>
    <ID>NoConsecutiveBlankLines:TransportModeIcon.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:DiscoverScreen.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:DiscoverViewModel.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:IntroContentSelectTransportMode.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:JourneyCard.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:ParkRideContent.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:SavedTripsScreen.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:TimeTableScreen.kt$ </ID>
    <ID>NoUnusedImports:DiscoverChipRow.kt$xyz.ksharma.krail.trip.planner.ui.discover.DiscoverChipRow.kt</ID>
    <ID>NoUnusedImports:RealStopResultsManager.kt$xyz.ksharma.krail.trip.planner.ui.searchstop.RealStopResultsManager.kt</ID>
    <ID>NoUnusedImports:SavedTripCard.kt$xyz.ksharma.krail.trip.planner.ui.components.SavedTripCard.kt</ID>
    <ID>NoUnusedImports:SavedTripsViewModel.kt$xyz.ksharma.krail.trip.planner.ui.savedtrips.SavedTripsViewModel.kt</ID>
    <ID>NoUnusedImports:SearchStopDestination.kt$xyz.ksharma.krail.trip.planner.ui.searchstop.SearchStopDestination.kt</ID>
    <ID>NoUnusedImports:TimeTableDestination.kt$xyz.ksharma.krail.trip.planner.ui.timetable.TimeTableDestination.kt</ID>
    <ID>NoUnusedImports:ViewModelModule.kt$xyz.ksharma.krail.trip.planner.ui.di.ViewModelModule.kt</ID>
    <ID>ParameterNaming:DateSelection.kt$onNextClicked</ID>
    <ID>ParameterNaming:DateSelection.kt$onPreviousClicked</ID>
    <ID>ParameterNaming:DateTimeSelectorScreen.kt$onDateTimeSelected</ID>
    <ID>ParameterNaming:DiscoverChipRow.kt$onChipSelected</ID>
    <ID>ParameterNaming:DiscoverScreen.kt$onAppSocialLinkClicked</ID>
    <ID>ParameterNaming:DiscoverScreen.kt$onCardSeen</ID>
    <ID>ParameterNaming:DiscoverScreen.kt$onChipSelected</ID>
    <ID>ParameterNaming:DiscoverScreen.kt$onCtaClicked</ID>
    <ID>ParameterNaming:DiscoverScreen.kt$onPartnerSocialLinkClicked</ID>
    <ID>ParameterNaming:JourneyTimeOptionsGroup.kt$onOptionSelected</ID>
    <ID>ParameterNaming:ThemeSelectionScreen.kt$onThemeSelected</ID>
    <ID>ParameterNaming:TimeTableScreen.kt$onModeSelectionChanged</ID>
    <ID>PreviewPublic:ParkRideContent.kt$ParkRideLoadedContentPreview_Barbie</ID>
    <ID>PreviewPublic:ParkRideContent.kt$ParkRideLoadedContentPreview_Default</ID>
    <ID>PreviewPublic:ParkRideContent.kt$ParkRideLoadedContentPreview_Full</ID>
    <ID>ReturnCount:DiscoverViewModel.kt$fun DiscoverState.getCtaOrPartnerSocialLinkForCard(cardId: String): String?</ID>
    <ID>SpacingAroundColon:TripPlannerDestinations.kt$AppUpgradeRoute$:</ID>
    <ID>SpacingAroundColon:TripPlannerDestinations.kt$IntroRoute$:</ID>
    <ID>SpacingAroundColon:TripPlannerDestinations.kt$SavedTripsRoute$:</ID>
    <ID>SpreadOperator:ThemeSelectionScreen.kt$(*Array(KrailThemeStyle.entries.size) { false })</ID>
    <ID>SpreadOperator:TimeTableScreen.kt$(*timeTableState.unselectedModes.toTypedArray())</ID>
    <ID>StringLiteralDuplication:JourneyCard.kt$"10 mins"</ID>
    <ID>StringLiteralDuplication:JourneyCard.kt$"15 mins"</ID>
    <ID>StringLiteralDuplication:JourneyCard.kt$"8:25am"</ID>
    <ID>StringLiteralDuplication:JourneyCard.kt$"8:40am"</ID>
    <ID>StringLiteralDuplication:JourneyCard.kt$"Platform 3"</ID>
    <ID>StringLiteralDuplication:LegView.kt$"01:00 am"</ID>
    <ID>StringLiteralDuplication:LegView.kt$"12:00 am"</ID>
    <ID>StringLiteralDuplication:LegView.kt$"DEF Station, Platform 3"</ID>
    <ID>StringLiteralDuplication:LegView.kt$"XYZ Station, Platform 1"</ID>
    <ID>StringLiteralDuplication:LegView.kt$"towards AVC via XYZ"</ID>
    <ID>StringLiteralDuplication:SearchStopScreen.kt$"Search Query"</ID>
    <ID>StringLiteralDuplication:SearchStopScreen.kt$"Search here"</ID>
    <ID>StringLiteralDuplication:SearchStopScreen.kt$"Stop Name"</ID>
    <ID>StringLiteralDuplication:TimeTableScreen.kt$"From Stop"</ID>
    <ID>StringLiteralDuplication:TimeTableScreen.kt$"To Stop"</ID>
    <ID>TooManyFunctions:JourneyCard.kt$xyz.ksharma.krail.trip.planner.ui.components.JourneyCard.kt</ID>
    <ID>TooManyFunctions:LegView.kt$xyz.ksharma.krail.trip.planner.ui.components.LegView.kt</ID>
    <ID>TooManyFunctions:RealStopResultsManager.kt$RealStopResultsManager : StopResultsManager</ID>
    <ID>TooManyFunctions:SavedTripsViewModel.kt$SavedTripsViewModel : ViewModel</ID>
    <ID>TooManyFunctions:SearchStopScreen.kt$xyz.ksharma.krail.trip.planner.ui.searchstop.SearchStopScreen.kt</ID>
    <ID>TooManyFunctions:TimeTableViewModel.kt$TimeTableViewModel : ViewModel</ID>
    <ID>TooManyFunctions:TransportModeIcon.kt$xyz.ksharma.krail.trip.planner.ui.components.TransportModeIcon.kt</ID>
    <ID>TooManyFunctions:TripResponseMapper.kt$xyz.ksharma.krail.trip.planner.ui.timetable.business.TripResponseMapper.kt</ID>
    <ID>UnusedParameter:JourneyCard.kt$platformNumber: String?</ID>
    <ID>UnusedParameter:OurStoryViewModel.kt$OurStoryViewModel$events: Flow&lt;OurStoryEvent&gt;</ID>
    <ID>UnusedPrivateMember:CollapsibleAlert.kt$@Preview @Composable private fun PreviewCollapsibleAlertCollapsed()</ID>
    <ID>UnusedPrivateMember:CollapsibleAlert.kt$@Preview @Composable private fun PreviewCollapsibleAlertExpanded()</ID>
    <ID>UnusedPrivateMember:DiscoverChip.kt$@Preview(group = "Discover Chip Previews - Barbie Pink", name = "Selected Dark Mode") @Preview @Composable private fun DiscoverChipPreview_BarbiePink_Selected_DarkMode()</ID>
    <ID>UnusedPrivateMember:DiscoverChip.kt$@Preview(group = "Discover Chip Previews - Barbie Pink", name = "Selected Light Mode") @Composable private fun DiscoverChipPreview_BarbiePink_Selected()</ID>
    <ID>UnusedPrivateMember:DiscoverChip.kt$@Preview(group = "Discover Chip Previews - Barbie Pink", name = "Unselected Dark Mode") @Preview @Composable private fun DiscoverChipPreview_BarbiePink_Unselected_DarkMode()</ID>
    <ID>UnusedPrivateMember:DiscoverChip.kt$@Preview(group = "Discover Chip Previews - Barbie Pink", name = "Unselected Light Mode") @Preview @Composable private fun DiscoverChipPreview_BarbiePink_Unselected()</ID>
    <ID>UnusedPrivateMember:DiscoverChipRow.kt$@Preview @Composable private fun DiscoverChipRowPreview()</ID>
    <ID>UnusedPrivateMember:DiscoverScreen.kt$@Preview( group = "Discover Card Phone", showBackground = true, widthDp = 480, heightDp = 854, ) @Composable private fun DiscoverScreenCompactDarkPreview()</ID>
    <ID>UnusedPrivateMember:DiscoverScreen.kt$@Preview( group = "Discover Card Phone", showBackground = true, widthDp = 480, heightDp = 854, ) @Composable private fun DiscoverScreenCompactLightPreview()</ID>
    <ID>UnusedPrivateMember:DiscoverScreen.kt$@Preview( group = "Discover Card Tablet", showBackground = true, widthDp = 720, heightDp = 1024, ) @Composable private fun DiscoverScreenTabletDarkPreview()</ID>
    <ID>UnusedPrivateMember:DiscoverScreen.kt$@Preview( group = "Discover Card Tablet", showBackground = true, widthDp = 720, heightDp = 1024, ) @Composable private fun DiscoverScreenTabletLightPreview()</ID>
    <ID>UnusedPrivateMember:ErrorMessage.kt$@Composable private fun PreviewErrorMessage()</ID>
    <ID>UnusedPrivateMember:IntroViewModel.kt$IntroViewModel$private fun updateUiState(block: IntroState.() -&gt; IntroState)</ID>
    <ID>UnusedPrivateMember:JourneyCard.kt$@Preview(name = "Default - Inline modes + platform (Dark)", group = "Collapsed") @Composable private fun Preview_Default_InlineModesAndPlatform_Dark()</ID>
    <ID>UnusedPrivateMember:JourneyCard.kt$@Preview(name = "Default - Inline modes + platform", group = "Collapsed") @Composable private fun Preview_Default_InlineModesAndPlatform()</ID>
    <ID>UnusedPrivateMember:JourneyCard.kt$@Preview(name = "Expanded - Journey card (Dark)", group = "Expanded") @Composable private fun Preview_JourneyCard_Expanded_Dark()</ID>
    <ID>UnusedPrivateMember:JourneyCard.kt$@Preview(name = "Expanded - Journey card", group = "Expanded") @Composable private fun Preview_JourneyCard_Expanded()</ID>
    <ID>UnusedPrivateMember:JourneyCard.kt$@Preview(name = "Large font - Modes on next line", group = "Collapsed") @Composable private fun Preview_LargeFont_ModesNextLine()</ID>
    <ID>UnusedPrivateMember:JourneyCard.kt$@Preview(name = "Many modes - Wrapping", group = "Collapsed") @Composable private fun Preview_ManyModes_Wrap()</ID>
    <ID>UnusedPrivateMember:LegView.kt$@Preview @Composable private fun PreviewLegView()</ID>
    <ID>UnusedPrivateMember:LegView.kt$@Preview @Composable private fun PreviewLegViewFerry()</ID>
    <ID>UnusedPrivateMember:LegView.kt$@Preview @Composable private fun PreviewLegViewLightRail()</ID>
    <ID>UnusedPrivateMember:LegView.kt$@Preview @Composable private fun PreviewLegViewMetro()</ID>
    <ID>UnusedPrivateMember:LegView.kt$@Preview @Composable private fun PreviewLegViewTwoStops()</ID>
    <ID>UnusedPrivateMember:LegView.kt$@Preview @Composable private fun PreviewProminentStopInfo()</ID>
    <ID>UnusedPrivateMember:LegView.kt$@Preview @Composable private fun PreviewRouteSummary()</ID>
    <ID>UnusedPrivateMember:LegView.kt$@Preview @Composable private fun PreviewStopsRow()</ID>
    <ID>UnusedPrivateMember:LegView.kt$@Preview @Composable private fun PreviewStopsRow_LargeFont()</ID>
    <ID>UnusedPrivateMember:ParkRideCard.kt$@Preview @Composable private fun ParkRideCardPreview()</ID>
    <ID>UnusedPrivateMember:ParkRideIcon.kt$@Preview @Composable private fun ParkRideIconBusThemePreview()</ID>
    <ID>UnusedPrivateMember:ParkRideIcon.kt$@Preview @Composable private fun ParkRideIconMetroThemePreview()</ID>
    <ID>UnusedPrivateMember:ParkRideIcon.kt$@Preview @Composable private fun ParkRideIconPinkThemePreview()</ID>
    <ID>UnusedPrivateMember:ParkRideIcon.kt$@Preview @Composable private fun ParkRideIconPurpleThemePreview()</ID>
    <ID>UnusedPrivateMember:ParkRideIcon.kt$@Preview @Composable private fun ParkRideIconTrainThemePreview()</ID>
    <ID>UnusedPrivateMember:RealStopResultsManager.kt$RealStopResultsManager$private fun filterProductClasses( stopResults: List&lt;SearchStopState.StopResult&gt;, excludedProductClasses: List&lt;Int&gt; = emptyList(), ): List&lt;SearchStopState.StopResult&gt;</ID>
    <ID>UnusedPrivateMember:SavedTripCard.kt$@Preview @Composable private fun SavedTripCardListPreview()</ID>
    <ID>UnusedPrivateMember:SavedTripCard.kt$@Preview @Composable private fun SavedTripCardPreview()</ID>
    <ID>UnusedPrivateMember:SavedTripsScreen.kt$@Composable private fun SavedTripsScreenPreview()</ID>
    <ID>UnusedPrivateMember:SearchStopRow.kt$@Composable private fun SearchStopColumnPreview()</ID>
    <ID>UnusedPrivateMember:SearchStopScreen.kt$@Composable private fun PreviewSearchStopScreenBus()</ID>
    <ID>UnusedPrivateMember:SearchStopScreen.kt$@Composable private fun PreviewSearchStopScreenCoach()</ID>
    <ID>UnusedPrivateMember:SearchStopScreen.kt$@Composable private fun PreviewSearchStopScreenEmpty()</ID>
    <ID>UnusedPrivateMember:SearchStopScreen.kt$@Composable private fun PreviewSearchStopScreenError()</ID>
    <ID>UnusedPrivateMember:SearchStopScreen.kt$@Composable private fun PreviewSearchStopScreenFerry()</ID>
    <ID>UnusedPrivateMember:SearchStopScreen.kt$@Composable private fun PreviewSearchStopScreenLightRail()</ID>
    <ID>UnusedPrivateMember:SearchStopScreen.kt$@Composable private fun PreviewSearchStopScreenLoading()</ID>
    <ID>UnusedPrivateMember:SearchStopScreen.kt$@Composable private fun PreviewSearchStopScreenMetro()</ID>
    <ID>UnusedPrivateMember:SearchStopScreen.kt$@Composable private fun PreviewSearchStopScreenTrain()</ID>
    <ID>UnusedPrivateMember:ServiceAlertScreen.kt$@Composable private fun PreviewServiceAlertScreen()</ID>
    <ID>UnusedPrivateMember:StopSearchListItem.kt$@Composable private fun StopSearchListItemLongNamePreview()</ID>
    <ID>UnusedPrivateMember:StopSearchListItem.kt$@Composable private fun StopSearchListItemPreview()</ID>
    <ID>UnusedPrivateMember:ThemeSelectionRadioButton.kt$@Preview @Composable private fun ThemeSelectionRadioButtonPreview()</ID>
    <ID>UnusedPrivateMember:ThemeSelectionRadioButton.kt$@Preview @Composable private fun ThemeSelectionRadioButtonUnselectedPreview()</ID>
    <ID>UnusedPrivateMember:TimeTableScreen.kt$@Composable private fun PreviewTimeTableScreen()</ID>
    <ID>UnusedPrivateMember:TimeTableScreen.kt$@Composable private fun PreviewTimeTableScreenError()</ID>
    <ID>UnusedPrivateMember:TimeTableScreen.kt$@Composable private fun PreviewTimeTableScreenNoResults()</ID>
    <ID>UnusedPrivateMember:TransportModeBadge.kt$@Composable private fun TransportModeBadgeFerryPreview()</ID>
    <ID>UnusedPrivateMember:TransportModeBadge.kt$@Composable private fun TransportModeBadgeTrainPreview()</ID>
    <ID>UnusedPrivateMember:TransportModeBadge.kt$@Preview @Composable private fun TransportModeBadgeBusPreview()</ID>
    <ID>UnusedPrivateMember:TransportModeIcon.kt$@Preview(group = previewGroupName) @Composable private fun BusPreview()</ID>
    <ID>UnusedPrivateMember:TransportModeIcon.kt$@Preview(group = previewGroupName) @Composable private fun FerryPreview()</ID>
    <ID>UnusedPrivateMember:TransportModeIcon.kt$@Preview(group = previewGroupName) @Composable private fun LightRailPreview()</ID>
    <ID>UnusedPrivateMember:TransportModeIcon.kt$@Preview(group = previewGroupName) @Composable private fun MetroPreview()</ID>
    <ID>UnusedPrivateMember:TransportModeIcon.kt$@Preview(group = previewGroupName) @Composable private fun TrainPreview()</ID>
    <ID>UnusedPrivateMember:TransportModeIcon.kt$@Preview(group = previewGroupName) @Composable private fun TrainPreviewLarge()</ID>
    <ID>UnusedPrivateMember:TransportModeIcon.kt$@Preview(group = previewWithBackground) @Composable private fun BusWithBackgroundPreview()</ID>
    <ID>UnusedPrivateMember:TransportModeIcon.kt$@Preview(group = previewWithBackground) @Composable private fun FerryWithBackgroundPreview()</ID>
    <ID>UnusedPrivateMember:TransportModeIcon.kt$@Preview(group = previewWithBackground) @Composable private fun LightRailWithBackgroundPreview()</ID>
    <ID>UnusedPrivateMember:TransportModeIcon.kt$@Preview(group = previewWithBackground) @Composable private fun MetroWithBackgroundPreview()</ID>
    <ID>UnusedPrivateMember:TransportModeIcon.kt$@Preview(group = previewWithBackground) @Composable private fun TrainWithBackgroundPreview()</ID>
    <ID>UnusedPrivateMember:TransportModeInfo.kt$@Preview @Composable private fun TransportModeInfoPreview()</ID>
    <ID>UnusedPrivateMember:TransportModeInfo.kt$@Preview @Composable private fun TransportModeInfoPreview_LargeFont()</ID>
    <ID>UnusedPrivateMember:WalkingLeg.kt$@Preview @Composable private fun PreviewWalkingLeg()</ID>
    <ID>UnusedPrivateProperty:AlertsDestination.kt$val serviceAlertState by viewModel.uiState.collectAsStateWithLifecycle()</ID>
    <ID>Wrapping:DiscoverScreen.kt$( "Reset", modifier = Modifier.clickable( indication = null, interactionSource = remember { MutableInteractionSource() }, onClick = resetAllSeenCards, ) )</ID>
    <ID>Wrapping:SavedTripsViewModel.kt$SavedTripsViewModel$it.totalSpots == -1 || it.spotsAvailable == -1</ID>
    <ID>Wrapping:SearchStopScreen.kt$(</ID>
  </CurrentIssues>
</SmellBaseline>
