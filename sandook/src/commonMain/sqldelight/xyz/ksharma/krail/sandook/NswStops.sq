-- Create NSW Stops Table --
CREATE TABLE IF NOT EXISTS NswStops (
    stopId TEXT PRIMARY KEY,
    stopName TEXT NOT NULL,
    stopLat REAL NOT NULL,
    stopLon REAL NOT NULL
);

-- Create NSW Stop Product Class Table --
-- Foregin key ensures that any stopId value inserted into NswStopProductClass must exist in
-- NswStops, helping maintain data integrity between the two tables.
CREATE TABLE IF NOT EXISTS NswStopProductClass (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    stopId TEXT NOT NULL,
    productClass INTEGER NOT NULL,
    FOREIGN KEY (stopId) REFERENCES NswStops(stopId)
);

-- Insert data into NswStops table (without productClass) --
insertStop:
INSERT OR IGNORE INTO NswStops(stopId, stopName, stopLat, stopLon)
VALUES (?, ?, ?, ?);

-- Select count of items in NswStops
selectStopsCount:
SELECT COUNT(*) AS totalStops
FROM NswStops;

-- Insert each productClass value for a given stop into NswStopProductClass --
insertStopProductClass:
INSERT INTO NswStopProductClass(stopId, productClass)
VALUES (?, ?);

-- Select count of items in NswStopProductClass
selectStopProductClassCount:
SELECT COUNT(*) AS totalItems
FROM NswStopProductClass;

clearNswStopsTable:
DELETE FROM NswStops;

clearNswStopProductClassTable:
DELETE FROM NswStopProductClass;

-- select stops and theier prodcut classes for a given stopId / name --
selectProductClassesForStop:
SELECT s.*,
       COALESCE(GROUP_CONCAT(p.productClass), '') AS productClasses
FROM NswStops AS s
LEFT JOIN NswStopProductClass AS p
    ON s.stopId = p.stopId
WHERE (
    s.stopId = :stopId  -- Use named parameter :stopId
    OR s.stopName LIKE '%' || :stopName || '%'  -- Use named parameter :stopName
)
GROUP BY s.stopId;
