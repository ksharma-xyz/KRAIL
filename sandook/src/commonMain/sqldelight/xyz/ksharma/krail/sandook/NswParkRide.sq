-- Table for storing detailed information about each Park & Ride facility.
CREATE TABLE IF NOT EXISTS NSWParkRideFacilityDetail (
    facilityId TEXT NOT NULL PRIMARY KEY, -- Unique facility identifier
    spotsAvailable INTEGER NOT NULL,      -- Number of available spots
    totalSpots INTEGER NOT NULL,          -- Total number of spots
    facilityName TEXT NOT NULL,           -- Name of the facility
    percentageFull INTEGER NOT NULL,      -- Percentage of spots filled
    stopId TEXT NOT NULL,                 -- Associated stop ID
    stopName TEXT NOT NULL,               -- Associated stop name
    timeText TEXT NOT NULL,               -- Time information as text
    suburb TEXT NOT NULL,                 -- Suburb location
    address TEXT NOT NULL,                -- Facility address
    latitude REAL NOT NULL,               -- Latitude coordinate
    longitude REAL NOT NULL,              -- Longitude coordinate
    timestamp INTEGER NOT NULL            -- Timestamp of the last update
);

-- Select all facility records
selectAll:
SELECT * FROM NSWParkRideFacilityDetail;

-- Insert or update a facility record
insertOrReplace:
INSERT OR REPLACE INTO NSWParkRideFacilityDetail(
  facilityId, spotsAvailable, totalSpots, facilityName, percentageFull, stopId, stopName, timeText, suburb, address, latitude, longitude, timestamp
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

-- Select all facilities for a list of stop IDs
selectByStopIds:
SELECT * FROM NSWParkRideFacilityDetail
WHERE stopId IN ?;

-- Select all facilities for a specific stopId
selectFacilitiesByStopId:
SELECT * FROM NSWParkRideFacilityDetail
WHERE stopId = ?;

-- Delete all facility records
deleteAll:
DELETE FROM NSWParkRideFacilityDetail;

-- Get the last API call timestamp for a facility
getTimestampByFacilityId:
SELECT timestamp FROM NSWParkRideFacilityDetail WHERE facilityId = ?;

-- Update the timestamp for a facility
updateTimestampByFacilityId:
UPDATE NSWParkRideFacilityDetail SET timestamp = ? WHERE facilityId = ?;


-- SavedParkRide Table
-- Table for mapping between stops and facilities (many-to-many relationship), with source info.
CREATE TABLE IF NOT EXISTS SavedParkRide (
    stopId TEXT NOT NULL,                 -- Stop identifier
    facilityId TEXT NOT NULL,             -- Facility identifier
    stopName TEXT NOT NULL,               -- Name of the stop
    facilityName TEXT NOT NULL,           -- Name of the facility
    source TEXT NOT NULL,                 -- Source is saved trips or user added see SavedParkRideSource
    PRIMARY KEY (stopId, facilityId)      -- Uniqueness only on stopId + facilityId
);

-- Insert or update a mapping between a stop and a facility, updating source if exists
insertOrReplaceSavedParkRide:
INSERT OR REPLACE INTO SavedParkRide(stopId, facilityId, stopName, facilityName, source)
VALUES (?, ?, ?, ?, ?);

-- Delete a specific mapping
deleteSavedParkRide:
DELETE FROM SavedParkRide WHERE stopId = ? AND facilityId = ?;

-- Delete all mappings for a given source
clearSavedParkRidesBySource:
DELETE FROM SavedParkRide WHERE source = ?;

-- Select all mappings
selectAllSavedParkRides:
SELECT * FROM SavedParkRide;

-- Select all unique facilities for a given stop and source
selectFacilitiesByStopIdAndSource:
SELECT DISTINCT facilityId FROM SavedParkRide WHERE stopId = ? AND source = ?;
