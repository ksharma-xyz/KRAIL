[versions]
java = "17"
# AGP - Android API level mapping https://developer.android.com/build/releases/gradle-plugin#api-level-support
agp = "8.5.2" # Android Gradle Plugin
kotlin = "2.0.21"
core-ktx = "1.13.0"
junit = "4.13.2"
androidx-test = "1.6.1"
androidx-test-ext-junit = "1.2.1"
android-lifecycle = "2.8.7"
activity-compose = "1.9.3"
hilt = "2.52"
hiltNavigationCompose = "1.2.0"
kotlinInject = "0.7.2"
kotlinxCollectionsImmutable = "0.3.8"
kotlinxDatetime = "0.6.1"
ktorClientLogging = "2.3.12"
lifecycleViewmodelCompose = "2.8.2"
navigationCompose = "2.8.0-alpha10"
okhttpBom = "4.12.0"
kotlinxSerializationJson = "1.7.3"
ksp = "2.0.21-1.0.27" # ksp to kotlin version mapping https://github.com/google/ksp/releases
paparazzi = "1.3.5"
retrofit = "2.11.0"
retrofit2KotlinxSerializationConverter = "1.0.0"
timber = "5.0.1"
compose-multiplatform = "1.7.0"
ktor = "3.0.1"
androidx-lifecycle = "2.8.3"
kotlinxCoroutines = "1.9.0"

#SDK
minSdk = "26"
compileSdk = "35"
targetSdk = "35"

[libraries]
core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "core-ktx" }
activity-compose = { group = "androidx.activity", name = "activity-compose", version.ref = "activity-compose" }
kotlinx-collections-immutable = { module = "org.jetbrains.kotlinx:kotlinx-collections-immutable", version.ref = "kotlinxCollectionsImmutable" }
kotlinx-datetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "kotlinxDatetime" }
lifecycle-runtime-ktx = { group = "androidx.lifecycle", name = "lifecycle-runtime-ktx", version.ref = "android-lifecycle" }
navigation-compose = { module = "org.jetbrains.androidx.navigation:navigation-compose", version.ref = "navigationCompose" }
retrofit2-kotlinx-serialization-converter = { module = "com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter", version.ref = "retrofit2KotlinxSerializationConverter" }
timber = { module = "com.jakewharton.timber:timber", version.ref = "timber" }
kotlinx-coroutines-core = { group = "org.jetbrains.kotlinx", name = "kotlinx-coroutines-core", version.ref = "kotlinxCoroutines" }

lifecycle-viewmodel-compose = { module = "org.jetbrains.androidx.lifecycle:lifecycle-viewmodel-compose", version.ref = "lifecycleViewmodelCompose" }
androidx-lifecycle-runtime-compose = { group = "org.jetbrains.androidx.lifecycle", name = "lifecycle-runtime-compose", version.ref = "androidx-lifecycle" }


# DI
di-kotlinInjectRuntime = { module = "me.tatarka.inject:kotlin-inject-runtime-kmp", version.ref = "kotlinInject" }
di-kotlinInjectCompilerKsp = { module = "me.tatarka.inject:kotlin-inject-compiler-ksp", version.ref = "kotlinInject" }

#Network
kotlinx-serialization-json = { group = "org.jetbrains.kotlinx", name = "kotlinx-serialization-json", version.ref = "kotlinxSerializationJson" }
ktor-client-content-negotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktor-client-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-client-cio = { module = "io.ktor:ktor-client-cio", version.ref = "ktor" }
ktor-client-okhttp = { module = "io.ktor:ktor-client-okhttp", version.ref = "ktor" }
ktor-client-darwin = { module = "io.ktor:ktor-client-darwin", version.ref = "ktor" }
ktor-serialization-kotlinx-json = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
ktor-client-logging = { module = "io.ktor:ktor-client-logging", version.ref = "ktor" }

#Test
test-composeUiTestManifest = { group = "androidx.compose.ui", name = "ui-test-manifest" }
test-composeUiTestJunit4 = { group = "androidx.compose.ui", name = "ui-test-junit4" }
test-junit = { group = "junit", name = "junit", version.ref = "junit" }
test-kotlin = { group = "org.jetbrains.kotlin", name = "kotlin-test", version.ref = "kotlin" }
test-androidxTestExtJunit = { group = "androidx.test.ext", name = "junit", version.ref = "androidx-test-ext-junit" }
test-googleTruth = { group = "com.google.truth", name = "truth", version = "1.4.4" }
test-turbine = { group = "app.cash.turbine", name = "turbine", version = "1.2.0" }
test-mockitoKotlin = { group = "org.mockito.kotlin", name = "mockito-kotlin", version = "5.4.0" }
test-kotlinxCoroutineTest = { group = "org.jetbrains.kotlinx", name = "kotlinx-coroutines-test", version = "1.9.0" }
test-androidxCoreKtx = { group = "androidx.test", name = "core-ktx", version.ref = "androidx-test" }

#BuildLogic
kotlin-gradlePlugin = { group = "org.jetbrains.kotlin", name = "kotlin-gradle-plugin", version.ref = "kotlin" }
android-gradlePlugin = { group = "com.android.tools.build", name = "gradle", version.ref = "agp" }
compose-gradlePlugin = { module = "org.jetbrains.compose:compose-gradle-plugin", version.ref = "compose-multiplatform" }
composeCompiler-gradlePlugin = { module = "org.jetbrains.kotlin:compose-compiler-gradle-plugin", version.ref = "kotlin" }

#CodeStyle Use spotless plugin for multiplatform support


[plugins]
androidApplication = { id = "com.android.application", version.ref = "agp" }
kotlinAndroid = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
hilt = { id = "com.google.dagger.hilt.android", version.ref = "hilt" }
kotlin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
cash-paparazzi = { id = "app.cash.paparazzi", version.ref = "paparazzi" }
ksp = { id = "com.google.devtools.ksp", version.ref = "ksp" }
compose-compiler = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }
google-services = { id = "com.google.gms.google-services", version = "4.4.2" }
composeMultiplatform = { id = "org.jetbrains.compose", version.ref = "compose-multiplatform" }
kotlinMultiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }

#Convention Plugins
krail-android-application = { id = "krail.android.application", version = "unspecified" }
krail-compose-multiplatform = { id = "krail.compose.multiplatform", version = "unspecified" }
krail-android-library = { id = "krail.android.library", version = "unspecified" }
krail-kotlin-android = { id = "krail.kotlin.android", version = "unspecified" }
krail-kotlin-multiplatform = { id = "krail.kotlin.multiplatform", version = "unspecified" }
