<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>CascadingCallWrapping:Button.kt$klickable( enabled = enabled, onClick = onClick, )</ID>
    <ID>FinalNewline:PlatformType.kt$xyz.ksharma.krail.taj.PlatformType.kt</ID>
    <ID>FunctionNaming:Button.kt$@Composable fun AlertButton( onClick: () -&gt; Unit, modifier: Modifier = Modifier, dimensions: ButtonDimensions = ButtonDefaults.smallButtonSize(), enabled: Boolean = true, content: @Composable () -&gt; Unit, )</ID>
    <ID>FunctionNaming:Button.kt$@Composable fun Button( onClick: () -&gt; Unit, modifier: Modifier = Modifier, colors: ButtonColors = ButtonDefaults.buttonColors(), dimensions: ButtonDimensions = ButtonDefaults.largeButtonSize(), enabled: Boolean = true, content: @Composable () -&gt; Unit, // RowScope and place )</ID>
    <ID>FunctionNaming:Button.kt$@Composable fun SubtleButton( onClick: () -&gt; Unit, modifier: Modifier = Modifier, dimensions: ButtonDimensions = ButtonDefaults.largeButtonSize(), enabled: Boolean = true, content: @Composable () -&gt; Unit, )</ID>
    <ID>FunctionNaming:Button.kt$@Composable fun TextButton( onClick: () -&gt; Unit, modifier: Modifier = Modifier, dimensions: ButtonDimensions = ButtonDefaults.smallButtonSize(), enabled: Boolean = true, content: @Composable () -&gt; Unit, )</ID>
    <ID>FunctionNaming:Divider.kt$@Composable fun Divider( modifier: Modifier = Modifier, type: DividerType = DividerType.HORIZONTAL, color: Color? = null, )</ID>
    <ID>FunctionNaming:Divider.kt$@Composable private fun DividerPreview()</ID>
    <ID>FunctionNaming:Divider.kt$@Composable private fun DividerVerticalPreview()</ID>
    <ID>FunctionNaming:RoundIconButton.kt$@Composable fun RoundIconButton( onClick: () -&gt; Unit, modifier: Modifier = Modifier, color: Color? = null, onClickLabel: String? = null, content: @Composable () -&gt; Unit = {}, )</ID>
    <ID>FunctionNaming:SeparatorIcon.kt$@Composable fun SeparatorIcon(modifier: Modifier = Modifier, color: Color = KrailTheme.colors.onSurface)</ID>
    <ID>FunctionNaming:SeparatorIcon.kt$@Composable private fun SeparatorIconPreview()</ID>
    <ID>FunctionNaming:Text.kt$@Composable fun Text( text: AnnotatedString, modifier: Modifier = Modifier, style: TextStyle = LocalTextStyle.current, color: Color? = null, textAlign: TextAlign = TextAlign.Start, maxLines: Int = Int.MAX_VALUE, overflow: TextOverflow = if (maxLines == Int.MAX_VALUE) TextOverflow.Clip else TextOverflow.Ellipsis, fontFamily: FontFamily? = null, onTextLayout: ((TextLayoutResult) -&gt; Unit)? = null, )</ID>
    <ID>FunctionNaming:Text.kt$@Composable fun Text( text: String, modifier: Modifier = Modifier, style: TextStyle = LocalTextStyle.current, color: Color? = null, textAlign: TextAlign = TextAlign.Start, maxLines: Int = Int.MAX_VALUE, overflow: TextOverflow = if (maxLines == Int.MAX_VALUE) TextOverflow.Clip else TextOverflow.Ellipsis, onTextLayout: ((TextLayoutResult) -&gt; Unit)? = null, )</ID>
    <ID>FunctionNaming:Text.kt$@Preview @Composable private fun TextPreview()</ID>
    <ID>FunctionNaming:Text.kt$@Preview @Composable private fun TextWithColorPreview()</ID>
    <ID>FunctionNaming:TextField.kt$@Composable fun TextField( modifier: Modifier = Modifier, placeholder: String? = null, initialText: String? = null, enabled: Boolean = true, textStyle: TextStyle? = null, readOnly: Boolean = false, leadingIcon: (@Composable () -&gt; Unit)? = null, imeAction: ImeAction = ImeAction.Default, filter: (CharSequence) -&gt; CharSequence = { it }, maxLength: Int = Int.MAX_VALUE, onTextChange: (CharSequence) -&gt; Unit = {}, )</ID>
    <ID>FunctionNaming:TextField.kt$@Composable private fun TextFieldDisabledPlaceholderPreview()</ID>
    <ID>FunctionNaming:TextField.kt$@Composable private fun TextFieldDisabledPreview()</ID>
    <ID>FunctionNaming:TextField.kt$@Composable private fun TextFieldEnabledPlaceholderPreview()</ID>
    <ID>FunctionNaming:TextField.kt$@Composable private fun TextFieldEnabledPreview()</ID>
    <ID>FunctionNaming:TextField.kt$@Composable private fun TextFieldPlaceholder(placeholder: String? = null)</ID>
    <ID>FunctionNaming:TextFieldButton.kt$@Composable fun TextFieldButton( onClick: () -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, content: @Composable () -&gt; Unit, )</ID>
    <ID>FunctionNaming:Theme.kt$@Composable fun KrailTheme( darkTheme: Boolean = isSystemInDarkTheme(), content: @Composable () -&gt; Unit, )</ID>
    <ID>FunctionNaming:TitleBar.kt$@Composable fun NavActionButton( icon: ImageVector, iconContentDescription: String, onClick: () -&gt; Unit, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:TitleBar.kt$@Composable fun TitleBar( title: @Composable () -&gt; Unit, modifier: Modifier = Modifier, onNavActionClick: (() -&gt; Unit)? = null, actions: @Composable (() -&gt; Unit)? = null, )</ID>
    <ID>Indentation:ScalingIndication.kt$ScaleIndicationNode$ </ID>
    <ID>LongMethod:TextField.kt$@Composable fun TextField( modifier: Modifier = Modifier, placeholder: String? = null, initialText: String? = null, enabled: Boolean = true, textStyle: TextStyle? = null, readOnly: Boolean = false, leadingIcon: (@Composable () -&gt; Unit)? = null, imeAction: ImeAction = ImeAction.Default, filter: (CharSequence) -&gt; CharSequence = { it }, maxLength: Int = Int.MAX_VALUE, onTextChange: (CharSequence) -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:Button.kt$( onClick: () -&gt; Unit, modifier: Modifier = Modifier, colors: ButtonColors = ButtonDefaults.buttonColors(), dimensions: ButtonDimensions = ButtonDefaults.largeButtonSize(), enabled: Boolean = true, content: @Composable () -&gt; Unit, // RowScope and place )</ID>
    <ID>LongParameterList:Text.kt$( text: AnnotatedString, modifier: Modifier = Modifier, style: TextStyle = LocalTextStyle.current, color: Color? = null, textAlign: TextAlign = TextAlign.Start, maxLines: Int = Int.MAX_VALUE, overflow: TextOverflow = if (maxLines == Int.MAX_VALUE) TextOverflow.Clip else TextOverflow.Ellipsis, fontFamily: FontFamily? = null, onTextLayout: ((TextLayoutResult) -&gt; Unit)? = null, )</ID>
    <ID>LongParameterList:Text.kt$( text: String, modifier: Modifier = Modifier, style: TextStyle = LocalTextStyle.current, color: Color? = null, textAlign: TextAlign = TextAlign.Start, maxLines: Int = Int.MAX_VALUE, overflow: TextOverflow = if (maxLines == Int.MAX_VALUE) TextOverflow.Clip else TextOverflow.Ellipsis, onTextLayout: ((TextLayoutResult) -&gt; Unit)? = null, )</ID>
    <ID>LongParameterList:TextField.kt$( modifier: Modifier = Modifier, placeholder: String? = null, initialText: String? = null, enabled: Boolean = true, textStyle: TextStyle? = null, readOnly: Boolean = false, leadingIcon: (@Composable () -&gt; Unit)? = null, imeAction: ImeAction = ImeAction.Default, filter: (CharSequence) -&gt; CharSequence = { it }, maxLength: Int = Int.MAX_VALUE, onTextChange: (CharSequence) -&gt; Unit = {}, )</ID>
    <ID>MagicNumber:A11yColors.kt$0.05f</ID>
    <ID>MagicNumber:Button.kt$ButtonDimensions$50</ID>
    <ID>MagicNumber:ColorsExt.kt$0xFF</ID>
    <ID>MagicNumber:ColorsExt.kt$120</ID>
    <ID>MagicNumber:ColorsExt.kt$16</ID>
    <ID>MagicNumber:ColorsExt.kt$180</ID>
    <ID>MagicNumber:ColorsExt.kt$24</ID>
    <ID>MagicNumber:ColorsExt.kt$240</ID>
    <ID>MagicNumber:ColorsExt.kt$255</ID>
    <ID>MagicNumber:ColorsExt.kt$255f</ID>
    <ID>MagicNumber:ColorsExt.kt$300</ID>
    <ID>MagicNumber:ColorsExt.kt$4</ID>
    <ID>MagicNumber:ColorsExt.kt$6</ID>
    <ID>MagicNumber:ColorsExt.kt$60</ID>
    <ID>MagicNumber:ColorsExt.kt$8</ID>
    <ID>MagicNumber:DpExt.kt$0.7f</ID>
    <ID>MagicNumber:DpExt.kt$1.5f</ID>
    <ID>MagicNumber:ScalingIndication.kt$ScaleIndicationNode$0.9f</ID>
    <ID>MagicNumber:TextFieldButton.kt$50</ID>
    <ID>NewLineAtEndOfFile:PlatformType.kt$xyz.ksharma.krail.taj.PlatformType.kt</ID>
    <ID>NoConsecutiveBlankLines:A11yColors.kt$ </ID>
    <ID>NoConsecutiveBlankLines:Button.kt$ </ID>
    <ID>NoConsecutiveBlankLines:ColorsExt.kt$ </ID>
    <ID>NoConsecutiveBlankLines:TextField.kt$ </ID>
    <ID>NoUnusedImports:A11yColors.kt$xyz.ksharma.krail.taj.theme.A11yColors.kt</ID>
    <ID>NoUnusedImports:Button.kt$xyz.ksharma.krail.taj.components.Button.kt</ID>
    <ID>NoUnusedImports:KrailTypography.kt$xyz.ksharma.krail.taj.theme.KrailTypography.kt</ID>
    <ID>NoUnusedImports:TextFieldButton.kt$xyz.ksharma.krail.taj.components.TextFieldButton.kt</ID>
    <ID>TooManyFunctions:ColorsExt.kt$xyz.ksharma.krail.taj.ColorsExt.kt</ID>
    <ID>UnusedParameter:RoundIconButton.kt$onClickLabel: String? = null</ID>
    <ID>UnusedPrivateMember:Divider.kt$@Composable private fun DividerPreview()</ID>
    <ID>UnusedPrivateMember:Divider.kt$@Composable private fun DividerVerticalPreview()</ID>
    <ID>UnusedPrivateMember:SeparatorIcon.kt$@Composable private fun SeparatorIconPreview()</ID>
    <ID>UnusedPrivateMember:Text.kt$@Preview @Composable private fun TextPreview()</ID>
    <ID>UnusedPrivateMember:Text.kt$@Preview @Composable private fun TextWithColorPreview()</ID>
    <ID>UnusedPrivateMember:TextField.kt$@Composable private fun TextFieldDisabledPlaceholderPreview()</ID>
    <ID>UnusedPrivateMember:TextField.kt$@Composable private fun TextFieldDisabledPreview()</ID>
    <ID>UnusedPrivateMember:TextField.kt$@Composable private fun TextFieldEnabledPlaceholderPreview()</ID>
    <ID>UnusedPrivateMember:TextField.kt$@Composable private fun TextFieldEnabledPreview()</ID>
    <ID>UnusedPrivateProperty:A11yColors.kt$// when font scale greater than 1.2f. Text size is 18dp default and 14dp bold. private const val LARGE_TEXT_SIZE_CONTRAST_AA = 3.0f</ID>
  </CurrentIssues>
</SmellBaseline>
